swagger: '2.0'
info:
  title: CosmoSquad - REST and gRPC Gateway docs
  description: 'A REST interface for state queries, transactions'
  version: 0.0.1
paths:
  /squad/farming/v1beta1/current_epoch_days:
    get:
      summary: CurrentEpochDays returns current epoch days.
      description: Returns the current epoch days
      operationId: CurrentEpochDays
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              current_epoch_days:
                type: integer
                format: int64
            description: >-
              QuerCurrentEpochDaysResponse is the response type for the
              Query/CurrentEpochDays RPC method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: 'rpc error: code = InvalidArgument desc = empty request'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/cosmosquad-labs/squad/tree/main/docs/How-To/cli#currentepochdays
  /squad/farming/v1beta1/params:
    get:
      summary: Params returns parameters of the farming module.
      description: Returns all parameters of the farming module.
      operationId: FarmingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  private_plan_creation_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: >-
                      private_plan_creation_fee specifies the fee for plan
                      creation

                      this fee prevents from spamming and is collected in the
                      community pool
                  next_epoch_days:
                    type: integer
                    format: int64
                    title: >-
                      next_epoch_days is the epoch length in number of days

                      it updates internal state called CurrentEpochDays that is
                      used to process

                      staking and reward distribution in end blocker
                  farming_fee_collector:
                    type: string
                    title: >-
                      farming_fee_collector is the module account address to
                      collect fees within the farming module
                  delayed_staking_gas_fee:
                    type: string
                    format: uint64
                    title: >-
                      delayed_staking_gas_fee is used to impose gas fee for the
                      delayed staking
                description: Params defines the set of params for the farming module.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
      externalDocs:
        description: Find out more about the params
        url: >-
          https://github.com/cosmosquad-labs/squad/blob/main/x/farming/spec/07_params.md
  /squad/farming/v1beta1/plans:
    get:
      summary: Plans returns all plans.
      description: Returns a list of all farming plans with pagination result.
      operationId: Plans
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              plans:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                title: plans are the existing plans
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryPlansResponse is the response type for the Query/Plans RPC
              method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                rpc error: code = InvalidArgument desc = invalid plan type
                PLAN_TYPE
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 13
              message: 'rpc error: code = Internal desc = error'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: type
          in: query
          required: false
          type: string
        - name: farming_pool_address
          in: query
          required: false
          type: string
        - name: termination_address
          in: query
          required: false
          type: string
        - name: staking_coin_denom
          in: query
          required: false
          type: string
        - name: terminated
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/cosmosquad-labs/squad/tree/main/docs/How-To/cli#Plans
  '/squad/farming/v1beta1/plans/{plan_id}':
    get:
      summary: Plan returns a specific plan.
      description: Returns the farming plan that corresponds to the plan_id.
      operationId: Plan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              plan:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryPlanResponse is the response type for the Query/Plan RPC
              method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: 'rpc error: code = InvalidArgument desc = empty request'
              details: []
        '404':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 5
              message: 'rpc error: code = NotFound desc = plan plan_id not found'
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 13
              message: 'rpc error: code = Internal desc = error'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: plan_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/cosmosquad-labs/squad/tree/main/docs/How-To/cli#plan
  '/squad/farming/v1beta1/rewards/{farmer}':
    get:
      summary: Rewards returns rewards for a farmer
      description: Returns all rewards coins that corresponds to the farmer
      operationId: Rewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              QueryRewardsResponse is the response type for the Query/Rewards
              RPC method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: 'rpc error: code = InvalidArgument desc = empty request'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: farmer
          in: path
          required: true
          type: string
        - name: staking_coin_denom
          in: query
          required: false
          type: string
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/cosmosquad-labs/squad/tree/main/docs/How-To/cli#rewards
  '/squad/farming/v1beta1/stakings/{farmer}':
    get:
      summary: Stakings returns all stakings by a farmer.
      description: >-
        Returns all stakings (staked and queued coins) that corresponds to the
        farmer
      operationId: Stakings
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              staked_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
              queued_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              QueryStakingsResponse is the response type for the Query/Stakings
              RPC method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: 'rpc error: code = InvalidArgument desc = empty request'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: farmer
          in: path
          required: true
          type: string
        - name: staking_coin_denom
          in: query
          required: false
          type: string
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/cosmosquad-labs/squad/tree/main/docs/How-To/cli#stakings
  '/squad/farming/v1beta1/total_stakings/{staking_coin_denom}':
    get:
      summary: TotalStakings returns total staking amount for a staking coin denom
      description: Returns total stakings that corresponds to the staking_coin_denom
      operationId: TotalStakings
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: string
            description: >-
              QueryTotalStakingsResponse is the response type for the
              Query/TotalStakings RPC method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: 'rpc error: code = InvalidArgument desc = empty request'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: staking_coin_denom
          in: path
          required: true
          type: string
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/cosmosquad-labs/squad/tree/main/docs/How-To/cli#totalstakings
  /squad/liquidity/v1beta1/pairs:
    get:
      summary: Pairs returns all liquidity pairs.
      operationId: Pairs
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pairs:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                    base_coin_denom:
                      type: string
                    quote_coin_denom:
                      type: string
                    escrow_address:
                      type: string
                    last_order_id:
                      type: string
                      format: uint64
                    last_price:
                      type: string
                    current_batch_id:
                      type: string
                      format: uint64
                  description: Pair defines a coin pair.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryPairsResponse is response type for the Query/Pairs RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denoms
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/squad/liquidity/v1beta1/pairs/{pair_id}':
    get:
      summary: Pair returns the specific pair.
      operationId: Pair
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pair:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                  base_coin_denom:
                    type: string
                  quote_coin_denom:
                    type: string
                  escrow_address:
                    type: string
                  last_order_id:
                    type: string
                    format: uint64
                  last_price:
                    type: string
                  current_batch_id:
                    type: string
                    format: uint64
                description: Pair defines a coin pair.
            description: QueryPairResponse is response type for the Query/Pair RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pair_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/squad/liquidity/v1beta1/pairs/{pair_id}/orders':
    get:
      summary: Orders returns all orders.
      operationId: Orders
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              orders:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id specifies the id for the request
                    pair_id:
                      type: string
                      format: uint64
                      title: pair_id specifies the pair id
                    msg_height:
                      type: string
                      format: int64
                      title: >-
                        msg_height specifies the block height when the request
                        is stored for the batch execution
                    orderer:
                      type: string
                      title: >-
                        orderer specifies the bech32-encoded address that makes
                        an order
                    direction:
                      title: >-
                        direction specifies the order direction; either buy or
                        sell
                      type: string
                      enum:
                        - ORDER_DIRECTION_UNSPECIFIED
                        - ORDER_DIRECTION_BUY
                        - ORDER_DIRECTION_SELL
                      default: ORDER_DIRECTION_UNSPECIFIED
                      description: |-
                        OrderDirection enumerates order directions.

                         - ORDER_DIRECTION_UNSPECIFIED: ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
                         - ORDER_DIRECTION_BUY: ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
                         - ORDER_DIRECTION_SELL: ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
                    offer_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    remaining_offer_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      title: remaining_offer_coin specifies the remaining offer coin
                    received_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      title: received_coin specifies the received coin after the swap
                    price:
                      type: string
                      title: >-
                        price specifies the price that an orderer is willing to
                        swap
                    amount:
                      type: string
                    open_amount:
                      type: string
                    batch_id:
                      type: string
                      format: uint64
                      title: >-
                        batch_id specifies the pair's batch id when the request
                        is stored
                    expire_at:
                      type: string
                      format: date-time
                    status:
                      type: string
                      enum:
                        - ORDER_STATUS_UNSPECIFIED
                        - ORDER_STATUS_NOT_EXECUTED
                        - ORDER_STATUS_NOT_MATCHED
                        - ORDER_STATUS_PARTIALLY_MATCHED
                        - ORDER_STATUS_COMPLETED
                        - ORDER_STATUS_CANCELED
                        - ORDER_STATUS_EXPIRED
                      default: ORDER_STATUS_UNSPECIFIED
                      description: |-
                        OrderStatus enumerates order statuses.

                         - ORDER_STATUS_UNSPECIFIED: ORDER_STATUS_UNSPECIFIED specifies unknown order status
                         - ORDER_STATUS_NOT_EXECUTED: ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
                         - ORDER_STATUS_NOT_MATCHED: ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
                         - ORDER_STATUS_PARTIALLY_MATCHED: ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
                         - ORDER_STATUS_COMPLETED: ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
                         - ORDER_STATUS_CANCELED: ORDER_STATUS_CANCELED indicates the order has been canceled
                         - ORDER_STATUS_EXPIRED: ORDER_STATUS_EXPIRED indicates the order has been expired
                  description: Order defines an order.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryOrdersResponse is response type for the Query/Orders RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pair_id
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/squad/liquidity/v1beta1/pairs/{pair_id}/orders/{id}':
    get:
      summary: Order returns the specific order.
      operationId: Order
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              order:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    title: id specifies the id for the request
                  pair_id:
                    type: string
                    format: uint64
                    title: pair_id specifies the pair id
                  msg_height:
                    type: string
                    format: int64
                    title: >-
                      msg_height specifies the block height when the request is
                      stored for the batch execution
                  orderer:
                    type: string
                    title: >-
                      orderer specifies the bech32-encoded address that makes an
                      order
                  direction:
                    title: >-
                      direction specifies the order direction; either buy or
                      sell
                    type: string
                    enum:
                      - ORDER_DIRECTION_UNSPECIFIED
                      - ORDER_DIRECTION_BUY
                      - ORDER_DIRECTION_SELL
                    default: ORDER_DIRECTION_UNSPECIFIED
                    description: |-
                      OrderDirection enumerates order directions.

                       - ORDER_DIRECTION_UNSPECIFIED: ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
                       - ORDER_DIRECTION_BUY: ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
                       - ORDER_DIRECTION_SELL: ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
                  offer_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  remaining_offer_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    title: remaining_offer_coin specifies the remaining offer coin
                  received_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    title: received_coin specifies the received coin after the swap
                  price:
                    type: string
                    title: >-
                      price specifies the price that an orderer is willing to
                      swap
                  amount:
                    type: string
                  open_amount:
                    type: string
                  batch_id:
                    type: string
                    format: uint64
                    title: >-
                      batch_id specifies the pair's batch id when the request is
                      stored
                  expire_at:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum:
                      - ORDER_STATUS_UNSPECIFIED
                      - ORDER_STATUS_NOT_EXECUTED
                      - ORDER_STATUS_NOT_MATCHED
                      - ORDER_STATUS_PARTIALLY_MATCHED
                      - ORDER_STATUS_COMPLETED
                      - ORDER_STATUS_CANCELED
                      - ORDER_STATUS_EXPIRED
                    default: ORDER_STATUS_UNSPECIFIED
                    description: |-
                      OrderStatus enumerates order statuses.

                       - ORDER_STATUS_UNSPECIFIED: ORDER_STATUS_UNSPECIFIED specifies unknown order status
                       - ORDER_STATUS_NOT_EXECUTED: ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
                       - ORDER_STATUS_NOT_MATCHED: ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
                       - ORDER_STATUS_PARTIALLY_MATCHED: ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
                       - ORDER_STATUS_COMPLETED: ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
                       - ORDER_STATUS_CANCELED: ORDER_STATUS_CANCELED indicates the order has been canceled
                       - ORDER_STATUS_EXPIRED: ORDER_STATUS_EXPIRED indicates the order has been expired
                description: Order defines an order.
            description: >-
              QueryOrderResponse is response type for the Query/Order RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pair_id
          in: path
          required: true
          type: string
          format: uint64
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /squad/liquidity/v1beta1/params:
    get:
      summary: Params returns parameters of the module.
      operationId: LiquidityParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  initial_pool_coin_supply:
                    type: string
                  batch_size:
                    type: integer
                    format: int64
                  tick_precision:
                    type: integer
                    format: int64
                  min_initial_deposit_amount:
                    type: string
                  pair_creation_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  pool_creation_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  fee_collector_address:
                    type: string
                  max_price_limit_ratio:
                    type: string
                  swap_fee_rate:
                    type: string
                  withdraw_fee_rate:
                    type: string
                  max_order_lifespan:
                    type: string
                description: Params defines the parameters for the liquidity module.
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /squad/liquidity/v1beta1/pools:
    get:
      summary: Pools returns all liquidity pools.
      operationId: Pools
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pools:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                    pair_id:
                      type: string
                      format: uint64
                    reserve_address:
                      type: string
                    pool_coin_denom:
                      type: string
                    balances:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    last_deposit_request_id:
                      type: string
                      format: uint64
                    last_withdraw_request_id:
                      type: string
                      format: uint64
                  description: PoolResponse defines a custom pool response message.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryPoolsResponse is response type for the Query/Pools RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pair_id
          in: query
          required: false
          type: string
          format: uint64
        - name: disabled
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/pool_coin_denom/{pool_coin_denom}':
    get:
      summary: >-
        PoolByPoolCoinDenom returns all pools that correspond to the pool coin
        denom.
      operationId: PoolByPoolCoinDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                  pair_id:
                    type: string
                    format: uint64
                  reserve_address:
                    type: string
                  pool_coin_denom:
                    type: string
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  last_deposit_request_id:
                    type: string
                    format: uint64
                  last_withdraw_request_id:
                    type: string
                    format: uint64
                description: PoolResponse defines a custom pool response message.
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_coin_denom
          in: path
          required: true
          type: string
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/reserve_address/{reserve_address}':
    get:
      summary: >-
        PoolByReserveAddress returns all pools that correspond to the reserve
        account.
      operationId: PoolByReserveAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                  pair_id:
                    type: string
                    format: uint64
                  reserve_address:
                    type: string
                  pool_coin_denom:
                    type: string
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  last_deposit_request_id:
                    type: string
                    format: uint64
                  last_withdraw_request_id:
                    type: string
                    format: uint64
                description: PoolResponse defines a custom pool response message.
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: reserve_address
          in: path
          required: true
          type: string
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/{pool_id}':
    get:
      summary: Pool returns the specific liquidity pool.
      operationId: Pool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                  pair_id:
                    type: string
                    format: uint64
                  reserve_address:
                    type: string
                  pool_coin_denom:
                    type: string
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  last_deposit_request_id:
                    type: string
                    format: uint64
                  last_withdraw_request_id:
                    type: string
                    format: uint64
                description: PoolResponse defines a custom pool response message.
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/{pool_id}/deposit_requests':
    get:
      summary: DepositRequests returns all deposit requests.
      operationId: DepositRequests
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit_requests:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id specifies the id for the request
                    pool_id:
                      type: string
                      format: uint64
                      title: pool_id specifies the pool id
                    msg_height:
                      type: string
                      format: int64
                      title: >-
                        msg_height specifies the block height when the request
                        is stored for the batch execution
                    depositor:
                      type: string
                      title: >-
                        depositor specifies the bech32-encoded address that
                        makes a deposit to the pool
                    deposit_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: deposit_coins specifies the amount of coins to deposit.
                    accepted_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        accepted_coins specifies the amount of coins that are
                        accepted.
                    minted_pool_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    status:
                      type: string
                      enum:
                        - REQUEST_STATUS_UNSPECIFIED
                        - REQUEST_STATUS_NOT_EXECUTED
                        - REQUEST_STATUS_SUCCEEDED
                        - REQUEST_STATUS_FAILED
                      default: REQUEST_STATUS_UNSPECIFIED
                      description: |-
                        RequestStatus enumerates request statuses.

                         - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
                         - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
                         - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
                         - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
                  description: DepositRequest defines a deposit request.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryDepositRequestsResponse is response type for the
              Query/DepositRequests RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/{pool_id}/deposit_requests/{id}':
    get:
      summary: DepositRequest returns the specific deposit request.
      operationId: DepositRequest
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit_request:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    title: id specifies the id for the request
                  pool_id:
                    type: string
                    format: uint64
                    title: pool_id specifies the pool id
                  msg_height:
                    type: string
                    format: int64
                    title: >-
                      msg_height specifies the block height when the request is
                      stored for the batch execution
                  depositor:
                    type: string
                    title: >-
                      depositor specifies the bech32-encoded address that makes
                      a deposit to the pool
                  deposit_coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: deposit_coins specifies the amount of coins to deposit.
                  accepted_coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: >-
                      accepted_coins specifies the amount of coins that are
                      accepted.
                  minted_pool_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  status:
                    type: string
                    enum:
                      - REQUEST_STATUS_UNSPECIFIED
                      - REQUEST_STATUS_NOT_EXECUTED
                      - REQUEST_STATUS_SUCCEEDED
                      - REQUEST_STATUS_FAILED
                    default: REQUEST_STATUS_UNSPECIFIED
                    description: |-
                      RequestStatus enumerates request statuses.

                       - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
                       - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
                       - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
                       - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
                description: DepositRequest defines a deposit request.
            description: >-
              QueryDepositRequestResponse is response type for the
              Query/DepositRequest RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/{pool_id}/withdraw_requests':
    get:
      summary: WithdrawRequests returns all withdraw requests.
      operationId: WithdrawRequests
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw_requests:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id specifies the id for the request
                    pool_id:
                      type: string
                      format: uint64
                      title: pool_id specifies the pool id
                    msg_height:
                      type: string
                      format: int64
                      title: >-
                        msg_height specifies the block height when the request
                        is stored for the batch execution
                    withdrawer:
                      type: string
                      title: >-
                        withdrawer specifies the bech32-encoded address that
                        withdraws pool coin from the pool
                    pool_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      title: >-
                        pool_coin specifies the pool coin that is a proof of
                        liquidity provider for the pool
                    withdrawn_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        withdrawn_coins specifies the amount of coins that are
                        withdrawn.
                    status:
                      type: string
                      enum:
                        - REQUEST_STATUS_UNSPECIFIED
                        - REQUEST_STATUS_NOT_EXECUTED
                        - REQUEST_STATUS_SUCCEEDED
                        - REQUEST_STATUS_FAILED
                      default: REQUEST_STATUS_UNSPECIFIED
                      description: |-
                        RequestStatus enumerates request statuses.

                         - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
                         - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
                         - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
                         - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
                  description: WithdrawRequest defines a withdraw request.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryWithdrawRequestsResponse is response type for the
              Query/WithdrawRequests RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/squad/liquidity/v1beta1/pools/{pool_id}/withdraw_requests/{id}':
    get:
      summary: WithdrawRequest returns the specific withdraw request.
      operationId: WithdrawRequest
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw_request:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    title: id specifies the id for the request
                  pool_id:
                    type: string
                    format: uint64
                    title: pool_id specifies the pool id
                  msg_height:
                    type: string
                    format: int64
                    title: >-
                      msg_height specifies the block height when the request is
                      stored for the batch execution
                  withdrawer:
                    type: string
                    title: >-
                      withdrawer specifies the bech32-encoded address that
                      withdraws pool coin from the pool
                  pool_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    title: >-
                      pool_coin specifies the pool coin that is a proof of
                      liquidity provider for the pool
                  withdrawn_coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: >-
                      withdrawn_coins specifies the amount of coins that are
                      withdrawn.
                  status:
                    type: string
                    enum:
                      - REQUEST_STATUS_UNSPECIFIED
                      - REQUEST_STATUS_NOT_EXECUTED
                      - REQUEST_STATUS_SUCCEEDED
                      - REQUEST_STATUS_FAILED
                    default: REQUEST_STATUS_UNSPECIFIED
                    description: |-
                      RequestStatus enumerates request statuses.

                       - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
                       - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
                       - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
                       - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
                description: WithdrawRequest defines a withdraw request.
            description: >-
              QueryWithdrawRequestResponse is response type for the
              Query/WithdrawRequest RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /squad/liquidstaking/v1beta1/params:
    get:
      summary: Params returns parameters of the liquidstaking module.
      description: Returns all parameters of the liquid staking module.
      operationId: LiquidStakingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  liquid_bond_denom:
                    type: string
                    description: >-
                      LiquidBondDenom specifies the denomination of the token
                      receiving after LiquidStaking, The value is calculated

                      through NetAmount.
                  whitelisted_validators:
                    type: array
                    items:
                      type: object
                      properties:
                        validator_address:
                          type: string
                          title: >-
                            validator_address defines the bech32-encoded address
                            that whitelisted validator
                        target_weight:
                          type: string
                          title: >-
                            target_weight specifies the target weight for liquid
                            staking, unstaking amount, which is a value for
                            calculating

                            the real weight to be derived according to the
                            active status
                      description: >-
                        WhitelistedValidator consists of the validator operator
                        address and the target weight, which is a value for

                        calculating the real weight to be derived according to
                        the active status. In the case of inactive, it is
                        calculated

                        as zero.
                    description: >-
                      WhitelistedValidators specifies the validators elected to
                      become Active Liquid Validators.
                  unstake_fee_rate:
                    type: string
                    title: >-
                      UnstakeFeeRate specifies the fee rate when liquid unstake
                      is requested, unbonded by subtracting it from

                      unbondingAmount
                  min_liquid_staking_amount:
                    type: string
                    description: >-
                      MinLiquidStakingAmount specifies the minimum number of
                      coins to be staked to the active liquid validators on
                      liquid

                      staking to minimize decimal loss and consider gas
                      efficiency.
                description: Params defines the set of params for the liquidstaking module.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
      externalDocs:
        description: Find out more about the params
        url: >-
          https://github.com/b-harvest/gravity-dex-zone/x/liquidstaking/spec/07_params.md
  /squad/liquidstaking/v1beta1/states:
    get:
      summary: States returns states of the liquidstaking module.
      description: Returns states of the liquid staking module.
      operationId: States
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              net_amount_state:
                type: object
                properties:
                  mint_rate:
                    type: string
                    title: mint_rate is bTokenTotalSupply / NetAmount
                  btoken_total_supply:
                    type: string
                    title: >-
                      btoken_total_supply returns the total supply of
                      btoken(liquid_bond_denom)
                  net_amount:
                    type: string
                    title: >-
                      net_amount is proxy account's native token balance + total
                      liquid tokens + total remaining rewards + total

                      unbonding balance
                  total_del_shares:
                    type: string
                    title: >-
                      total_del_shares define the delegation shares of all
                      liquid validators
                  total_liquid_tokens:
                    type: string
                    title: >-
                      total_liquid_tokens define the token amount worth of
                      delegation shares of all liquid validator (slashing
                      applied

                      amount)
                  total_remaining_rewards:
                    type: string
                    title: >-
                      total_remaining_rewards define the sum of remaining
                      rewards of proxy account by all liquid validators
                  total_unbonding_balance:
                    type: string
                    title: >-
                      total_unbonding_balance define the unbonding balance of
                      proxy account by all liquid validator (slashing applied

                      amount)
                  proxy_acc_balance:
                    type: string
                    title: >-
                      proxy_acc_balance define the balance of proxy account for
                      the native token
                description: >-
                  NetAmountState is type for net amount raw data and mint rate,
                  This is a value that depends on the several module

                  state every time, so it is used only for calculation and query
                  and is not stored in kv.
            description: >-
              QueryStatesResponse is the response type for the Query/States RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
      externalDocs:
        description: Find out more about the liquid staking
        url: 'https://github.com/b-harvest/gravity-dex-zone/x/liquidstaking/spec'
  /squad/liquidstaking/v1beta1/validators:
    get:
      summary: >-
        LiquidValidators returns liquid validators with states of the
        liquidstaking module.
      description: Returns all liquid validators of the liquid staking module.
      operationId: LiquidValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              liquid_validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    weight:
                      type: string
                      title: >-
                        weight specifies the weight for liquid staking,
                        unstaking amount
                    status:
                      title: status is the liquid validator status
                      type: string
                      enum:
                        - VALIDATOR_STATUS_UNSPECIFIED
                        - VALIDATOR_STATUS_ACTIVE
                        - VALIDATOR_STATUS_INACTIVE
                      default: VALIDATOR_STATUS_UNSPECIFIED
                      description: >-
                        ValidatorStatus enumerates the status of a liquid
                        validator.

                         - VALIDATOR_STATUS_UNSPECIFIED: VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
                         - VALIDATOR_STATUS_ACTIVE: VALIDATOR_STATUS_ACTIVE defines the active, valid status
                         - VALIDATOR_STATUS_INACTIVE: VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
                    del_shares:
                      type: string
                      title: del_shares define the delegation shares of the validator
                    liquid_tokens:
                      type: string
                      title: >-
                        liquid_tokens define the token amount worth of
                        delegation shares of the validator (slashing applied
                        amount)
                  description: >-
                    LiquidValidatorState is type LiquidValidator with state
                    added to return to query results.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryLiquidValidatorsResponse is the response type for the
              Query/LiquidValidators RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending

            order.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
      externalDocs:
        description: Find out more about the liquid validators
        url: 'https://github.com/b-harvest/gravity-dex-zone/x/liquidstaking/spec'
definitions:
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        format: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
      reverse:
        type: boolean
        format: boolean
        description: |-
          reverse is set to true if results are to be returned in the descending
          order.
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  squad.farming.v1beta1.Params:
    type: object
    properties:
      private_plan_creation_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: |-
          private_plan_creation_fee specifies the fee for plan creation
          this fee prevents from spamming and is collected in the community pool
      next_epoch_days:
        type: integer
        format: int64
        title: >-
          next_epoch_days is the epoch length in number of days

          it updates internal state called CurrentEpochDays that is used to
          process

          staking and reward distribution in end blocker
      farming_fee_collector:
        type: string
        title: >-
          farming_fee_collector is the module account address to collect fees
          within the farming module
      delayed_staking_gas_fee:
        type: string
        format: uint64
        title: >-
          delayed_staking_gas_fee is used to impose gas fee for the delayed
          staking
    description: Params defines the set of params for the farming module.
  squad.farming.v1beta1.QueryCurrentEpochDaysResponse:
    type: object
    properties:
      current_epoch_days:
        type: integer
        format: int64
    description: >-
      QuerCurrentEpochDaysResponse is the response type for the
      Query/CurrentEpochDays RPC method.
  squad.farming.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          private_plan_creation_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: >-
              private_plan_creation_fee specifies the fee for plan creation

              this fee prevents from spamming and is collected in the community
              pool
          next_epoch_days:
            type: integer
            format: int64
            title: >-
              next_epoch_days is the epoch length in number of days

              it updates internal state called CurrentEpochDays that is used to
              process

              staking and reward distribution in end blocker
          farming_fee_collector:
            type: string
            title: >-
              farming_fee_collector is the module account address to collect
              fees within the farming module
          delayed_staking_gas_fee:
            type: string
            format: uint64
            title: >-
              delayed_staking_gas_fee is used to impose gas fee for the delayed
              staking
        description: Params defines the set of params for the farming module.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  squad.farming.v1beta1.QueryPlanResponse:
    type: object
    properties:
      plan:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: QueryPlanResponse is the response type for the Query/Plan RPC method.
  squad.farming.v1beta1.QueryPlansResponse:
    type: object
    properties:
      plans:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: plans are the existing plans
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryPlansResponse is the response type for the Query/Plans RPC method.
  squad.farming.v1beta1.QueryRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: >-
      QueryRewardsResponse is the response type for the Query/Rewards RPC
      method.
  squad.farming.v1beta1.QueryStakingsResponse:
    type: object
    properties:
      staked_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      queued_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: >-
      QueryStakingsResponse is the response type for the Query/Stakings RPC
      method.
  squad.farming.v1beta1.QueryTotalStakingsResponse:
    type: object
    properties:
      amount:
        type: string
    description: >-
      QueryTotalStakingsResponse is the response type for the
      Query/TotalStakings RPC method.
  squad.liquidity.v1beta1.DepositRequest:
    type: object
    properties:
      id:
        type: string
        format: uint64
        title: id specifies the id for the request
      pool_id:
        type: string
        format: uint64
        title: pool_id specifies the pool id
      msg_height:
        type: string
        format: int64
        title: >-
          msg_height specifies the block height when the request is stored for
          the batch execution
      depositor:
        type: string
        title: >-
          depositor specifies the bech32-encoded address that makes a deposit to
          the pool
      deposit_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: deposit_coins specifies the amount of coins to deposit.
      accepted_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: accepted_coins specifies the amount of coins that are accepted.
      minted_pool_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      status:
        type: string
        enum:
          - REQUEST_STATUS_UNSPECIFIED
          - REQUEST_STATUS_NOT_EXECUTED
          - REQUEST_STATUS_SUCCEEDED
          - REQUEST_STATUS_FAILED
        default: REQUEST_STATUS_UNSPECIFIED
        description: |-
          RequestStatus enumerates request statuses.

           - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
           - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
           - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
           - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
    description: DepositRequest defines a deposit request.
  squad.liquidity.v1beta1.Order:
    type: object
    properties:
      id:
        type: string
        format: uint64
        title: id specifies the id for the request
      pair_id:
        type: string
        format: uint64
        title: pair_id specifies the pair id
      msg_height:
        type: string
        format: int64
        title: >-
          msg_height specifies the block height when the request is stored for
          the batch execution
      orderer:
        type: string
        title: orderer specifies the bech32-encoded address that makes an order
      direction:
        title: direction specifies the order direction; either buy or sell
        type: string
        enum:
          - ORDER_DIRECTION_UNSPECIFIED
          - ORDER_DIRECTION_BUY
          - ORDER_DIRECTION_SELL
        default: ORDER_DIRECTION_UNSPECIFIED
        description: |-
          OrderDirection enumerates order directions.

           - ORDER_DIRECTION_UNSPECIFIED: ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
           - ORDER_DIRECTION_BUY: ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
           - ORDER_DIRECTION_SELL: ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
      offer_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      remaining_offer_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        title: remaining_offer_coin specifies the remaining offer coin
      received_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        title: received_coin specifies the received coin after the swap
      price:
        type: string
        title: price specifies the price that an orderer is willing to swap
      amount:
        type: string
      open_amount:
        type: string
      batch_id:
        type: string
        format: uint64
        title: batch_id specifies the pair's batch id when the request is stored
      expire_at:
        type: string
        format: date-time
      status:
        type: string
        enum:
          - ORDER_STATUS_UNSPECIFIED
          - ORDER_STATUS_NOT_EXECUTED
          - ORDER_STATUS_NOT_MATCHED
          - ORDER_STATUS_PARTIALLY_MATCHED
          - ORDER_STATUS_COMPLETED
          - ORDER_STATUS_CANCELED
          - ORDER_STATUS_EXPIRED
        default: ORDER_STATUS_UNSPECIFIED
        description: |-
          OrderStatus enumerates order statuses.

           - ORDER_STATUS_UNSPECIFIED: ORDER_STATUS_UNSPECIFIED specifies unknown order status
           - ORDER_STATUS_NOT_EXECUTED: ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
           - ORDER_STATUS_NOT_MATCHED: ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
           - ORDER_STATUS_PARTIALLY_MATCHED: ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
           - ORDER_STATUS_COMPLETED: ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
           - ORDER_STATUS_CANCELED: ORDER_STATUS_CANCELED indicates the order has been canceled
           - ORDER_STATUS_EXPIRED: ORDER_STATUS_EXPIRED indicates the order has been expired
    description: Order defines an order.
  squad.liquidity.v1beta1.OrderDirection:
    type: string
    enum:
      - ORDER_DIRECTION_UNSPECIFIED
      - ORDER_DIRECTION_BUY
      - ORDER_DIRECTION_SELL
    default: ORDER_DIRECTION_UNSPECIFIED
    description: |-
      OrderDirection enumerates order directions.

       - ORDER_DIRECTION_UNSPECIFIED: ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
       - ORDER_DIRECTION_BUY: ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
       - ORDER_DIRECTION_SELL: ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
  squad.liquidity.v1beta1.OrderStatus:
    type: string
    enum:
      - ORDER_STATUS_UNSPECIFIED
      - ORDER_STATUS_NOT_EXECUTED
      - ORDER_STATUS_NOT_MATCHED
      - ORDER_STATUS_PARTIALLY_MATCHED
      - ORDER_STATUS_COMPLETED
      - ORDER_STATUS_CANCELED
      - ORDER_STATUS_EXPIRED
    default: ORDER_STATUS_UNSPECIFIED
    description: |-
      OrderStatus enumerates order statuses.

       - ORDER_STATUS_UNSPECIFIED: ORDER_STATUS_UNSPECIFIED specifies unknown order status
       - ORDER_STATUS_NOT_EXECUTED: ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
       - ORDER_STATUS_NOT_MATCHED: ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
       - ORDER_STATUS_PARTIALLY_MATCHED: ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
       - ORDER_STATUS_COMPLETED: ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
       - ORDER_STATUS_CANCELED: ORDER_STATUS_CANCELED indicates the order has been canceled
       - ORDER_STATUS_EXPIRED: ORDER_STATUS_EXPIRED indicates the order has been expired
  squad.liquidity.v1beta1.Pair:
    type: object
    properties:
      id:
        type: string
        format: uint64
      base_coin_denom:
        type: string
      quote_coin_denom:
        type: string
      escrow_address:
        type: string
      last_order_id:
        type: string
        format: uint64
      last_price:
        type: string
      current_batch_id:
        type: string
        format: uint64
    description: Pair defines a coin pair.
  squad.liquidity.v1beta1.Params:
    type: object
    properties:
      initial_pool_coin_supply:
        type: string
      batch_size:
        type: integer
        format: int64
      tick_precision:
        type: integer
        format: int64
      min_initial_deposit_amount:
        type: string
      pair_creation_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      pool_creation_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      fee_collector_address:
        type: string
      max_price_limit_ratio:
        type: string
      swap_fee_rate:
        type: string
      withdraw_fee_rate:
        type: string
      max_order_lifespan:
        type: string
    description: Params defines the parameters for the liquidity module.
  squad.liquidity.v1beta1.PoolResponse:
    type: object
    properties:
      id:
        type: string
        format: uint64
      pair_id:
        type: string
        format: uint64
      reserve_address:
        type: string
      pool_coin_denom:
        type: string
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      last_deposit_request_id:
        type: string
        format: uint64
      last_withdraw_request_id:
        type: string
        format: uint64
    description: PoolResponse defines a custom pool response message.
  squad.liquidity.v1beta1.QueryDepositRequestResponse:
    type: object
    properties:
      deposit_request:
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: id specifies the id for the request
          pool_id:
            type: string
            format: uint64
            title: pool_id specifies the pool id
          msg_height:
            type: string
            format: int64
            title: >-
              msg_height specifies the block height when the request is stored
              for the batch execution
          depositor:
            type: string
            title: >-
              depositor specifies the bech32-encoded address that makes a
              deposit to the pool
          deposit_coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: deposit_coins specifies the amount of coins to deposit.
          accepted_coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: accepted_coins specifies the amount of coins that are accepted.
          minted_pool_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
          status:
            type: string
            enum:
              - REQUEST_STATUS_UNSPECIFIED
              - REQUEST_STATUS_NOT_EXECUTED
              - REQUEST_STATUS_SUCCEEDED
              - REQUEST_STATUS_FAILED
            default: REQUEST_STATUS_UNSPECIFIED
            description: |-
              RequestStatus enumerates request statuses.

               - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
               - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
               - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
               - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
        description: DepositRequest defines a deposit request.
    description: >-
      QueryDepositRequestResponse is response type for the Query/DepositRequest
      RPC method.
  squad.liquidity.v1beta1.QueryDepositRequestsResponse:
    type: object
    properties:
      deposit_requests:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id specifies the id for the request
            pool_id:
              type: string
              format: uint64
              title: pool_id specifies the pool id
            msg_height:
              type: string
              format: int64
              title: >-
                msg_height specifies the block height when the request is stored
                for the batch execution
            depositor:
              type: string
              title: >-
                depositor specifies the bech32-encoded address that makes a
                deposit to the pool
            deposit_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: deposit_coins specifies the amount of coins to deposit.
            accepted_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: accepted_coins specifies the amount of coins that are accepted.
            minted_pool_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            status:
              type: string
              enum:
                - REQUEST_STATUS_UNSPECIFIED
                - REQUEST_STATUS_NOT_EXECUTED
                - REQUEST_STATUS_SUCCEEDED
                - REQUEST_STATUS_FAILED
              default: REQUEST_STATUS_UNSPECIFIED
              description: |-
                RequestStatus enumerates request statuses.

                 - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
                 - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
                 - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
                 - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
          description: DepositRequest defines a deposit request.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: >-
      QueryDepositRequestsResponse is response type for the
      Query/DepositRequests RPC method.
  squad.liquidity.v1beta1.QueryOrderResponse:
    type: object
    properties:
      order:
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: id specifies the id for the request
          pair_id:
            type: string
            format: uint64
            title: pair_id specifies the pair id
          msg_height:
            type: string
            format: int64
            title: >-
              msg_height specifies the block height when the request is stored
              for the batch execution
          orderer:
            type: string
            title: orderer specifies the bech32-encoded address that makes an order
          direction:
            title: direction specifies the order direction; either buy or sell
            type: string
            enum:
              - ORDER_DIRECTION_UNSPECIFIED
              - ORDER_DIRECTION_BUY
              - ORDER_DIRECTION_SELL
            default: ORDER_DIRECTION_UNSPECIFIED
            description: |-
              OrderDirection enumerates order directions.

               - ORDER_DIRECTION_UNSPECIFIED: ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
               - ORDER_DIRECTION_BUY: ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
               - ORDER_DIRECTION_SELL: ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
          offer_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
          remaining_offer_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            title: remaining_offer_coin specifies the remaining offer coin
          received_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            title: received_coin specifies the received coin after the swap
          price:
            type: string
            title: price specifies the price that an orderer is willing to swap
          amount:
            type: string
          open_amount:
            type: string
          batch_id:
            type: string
            format: uint64
            title: batch_id specifies the pair's batch id when the request is stored
          expire_at:
            type: string
            format: date-time
          status:
            type: string
            enum:
              - ORDER_STATUS_UNSPECIFIED
              - ORDER_STATUS_NOT_EXECUTED
              - ORDER_STATUS_NOT_MATCHED
              - ORDER_STATUS_PARTIALLY_MATCHED
              - ORDER_STATUS_COMPLETED
              - ORDER_STATUS_CANCELED
              - ORDER_STATUS_EXPIRED
            default: ORDER_STATUS_UNSPECIFIED
            description: |-
              OrderStatus enumerates order statuses.

               - ORDER_STATUS_UNSPECIFIED: ORDER_STATUS_UNSPECIFIED specifies unknown order status
               - ORDER_STATUS_NOT_EXECUTED: ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
               - ORDER_STATUS_NOT_MATCHED: ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
               - ORDER_STATUS_PARTIALLY_MATCHED: ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
               - ORDER_STATUS_COMPLETED: ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
               - ORDER_STATUS_CANCELED: ORDER_STATUS_CANCELED indicates the order has been canceled
               - ORDER_STATUS_EXPIRED: ORDER_STATUS_EXPIRED indicates the order has been expired
        description: Order defines an order.
    description: QueryOrderResponse is response type for the Query/Order RPC method.
  squad.liquidity.v1beta1.QueryOrdersResponse:
    type: object
    properties:
      orders:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id specifies the id for the request
            pair_id:
              type: string
              format: uint64
              title: pair_id specifies the pair id
            msg_height:
              type: string
              format: int64
              title: >-
                msg_height specifies the block height when the request is stored
                for the batch execution
            orderer:
              type: string
              title: orderer specifies the bech32-encoded address that makes an order
            direction:
              title: direction specifies the order direction; either buy or sell
              type: string
              enum:
                - ORDER_DIRECTION_UNSPECIFIED
                - ORDER_DIRECTION_BUY
                - ORDER_DIRECTION_SELL
              default: ORDER_DIRECTION_UNSPECIFIED
              description: |-
                OrderDirection enumerates order directions.

                 - ORDER_DIRECTION_UNSPECIFIED: ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
                 - ORDER_DIRECTION_BUY: ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
                 - ORDER_DIRECTION_SELL: ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
            offer_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            remaining_offer_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              title: remaining_offer_coin specifies the remaining offer coin
            received_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              title: received_coin specifies the received coin after the swap
            price:
              type: string
              title: price specifies the price that an orderer is willing to swap
            amount:
              type: string
            open_amount:
              type: string
            batch_id:
              type: string
              format: uint64
              title: >-
                batch_id specifies the pair's batch id when the request is
                stored
            expire_at:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - ORDER_STATUS_UNSPECIFIED
                - ORDER_STATUS_NOT_EXECUTED
                - ORDER_STATUS_NOT_MATCHED
                - ORDER_STATUS_PARTIALLY_MATCHED
                - ORDER_STATUS_COMPLETED
                - ORDER_STATUS_CANCELED
                - ORDER_STATUS_EXPIRED
              default: ORDER_STATUS_UNSPECIFIED
              description: |-
                OrderStatus enumerates order statuses.

                 - ORDER_STATUS_UNSPECIFIED: ORDER_STATUS_UNSPECIFIED specifies unknown order status
                 - ORDER_STATUS_NOT_EXECUTED: ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
                 - ORDER_STATUS_NOT_MATCHED: ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
                 - ORDER_STATUS_PARTIALLY_MATCHED: ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
                 - ORDER_STATUS_COMPLETED: ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
                 - ORDER_STATUS_CANCELED: ORDER_STATUS_CANCELED indicates the order has been canceled
                 - ORDER_STATUS_EXPIRED: ORDER_STATUS_EXPIRED indicates the order has been expired
          description: Order defines an order.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: QueryOrdersResponse is response type for the Query/Orders RPC method.
  squad.liquidity.v1beta1.QueryPairResponse:
    type: object
    properties:
      pair:
        type: object
        properties:
          id:
            type: string
            format: uint64
          base_coin_denom:
            type: string
          quote_coin_denom:
            type: string
          escrow_address:
            type: string
          last_order_id:
            type: string
            format: uint64
          last_price:
            type: string
          current_batch_id:
            type: string
            format: uint64
        description: Pair defines a coin pair.
    description: QueryPairResponse is response type for the Query/Pair RPC method.
  squad.liquidity.v1beta1.QueryPairsResponse:
    type: object
    properties:
      pairs:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
            base_coin_denom:
              type: string
            quote_coin_denom:
              type: string
            escrow_address:
              type: string
            last_order_id:
              type: string
              format: uint64
            last_price:
              type: string
            current_batch_id:
              type: string
              format: uint64
          description: Pair defines a coin pair.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: QueryPairsResponse is response type for the Query/Pairs RPC method.
  squad.liquidity.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          initial_pool_coin_supply:
            type: string
          batch_size:
            type: integer
            format: int64
          tick_precision:
            type: integer
            format: int64
          min_initial_deposit_amount:
            type: string
          pair_creation_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          pool_creation_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          fee_collector_address:
            type: string
          max_price_limit_ratio:
            type: string
          swap_fee_rate:
            type: string
          withdraw_fee_rate:
            type: string
          max_order_lifespan:
            type: string
        description: Params defines the parameters for the liquidity module.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  squad.liquidity.v1beta1.QueryPoolResponse:
    type: object
    properties:
      pool:
        type: object
        properties:
          id:
            type: string
            format: uint64
          pair_id:
            type: string
            format: uint64
          reserve_address:
            type: string
          pool_coin_denom:
            type: string
          balances:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          last_deposit_request_id:
            type: string
            format: uint64
          last_withdraw_request_id:
            type: string
            format: uint64
        description: PoolResponse defines a custom pool response message.
    description: QueryPoolResponse is response type for the Query/Pool RPC method.
  squad.liquidity.v1beta1.QueryPoolsResponse:
    type: object
    properties:
      pools:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
            pair_id:
              type: string
              format: uint64
            reserve_address:
              type: string
            pool_coin_denom:
              type: string
            balances:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            last_deposit_request_id:
              type: string
              format: uint64
            last_withdraw_request_id:
              type: string
              format: uint64
          description: PoolResponse defines a custom pool response message.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: QueryPoolsResponse is response type for the Query/Pools RPC method.
  squad.liquidity.v1beta1.QueryWithdrawRequestResponse:
    type: object
    properties:
      withdraw_request:
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: id specifies the id for the request
          pool_id:
            type: string
            format: uint64
            title: pool_id specifies the pool id
          msg_height:
            type: string
            format: int64
            title: >-
              msg_height specifies the block height when the request is stored
              for the batch execution
          withdrawer:
            type: string
            title: >-
              withdrawer specifies the bech32-encoded address that withdraws
              pool coin from the pool
          pool_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            title: >-
              pool_coin specifies the pool coin that is a proof of liquidity
              provider for the pool
          withdrawn_coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: withdrawn_coins specifies the amount of coins that are withdrawn.
          status:
            type: string
            enum:
              - REQUEST_STATUS_UNSPECIFIED
              - REQUEST_STATUS_NOT_EXECUTED
              - REQUEST_STATUS_SUCCEEDED
              - REQUEST_STATUS_FAILED
            default: REQUEST_STATUS_UNSPECIFIED
            description: |-
              RequestStatus enumerates request statuses.

               - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
               - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
               - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
               - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
        description: WithdrawRequest defines a withdraw request.
    description: >-
      QueryWithdrawRequestResponse is response type for the
      Query/WithdrawRequest RPC method.
  squad.liquidity.v1beta1.QueryWithdrawRequestsResponse:
    type: object
    properties:
      withdraw_requests:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id specifies the id for the request
            pool_id:
              type: string
              format: uint64
              title: pool_id specifies the pool id
            msg_height:
              type: string
              format: int64
              title: >-
                msg_height specifies the block height when the request is stored
                for the batch execution
            withdrawer:
              type: string
              title: >-
                withdrawer specifies the bech32-encoded address that withdraws
                pool coin from the pool
            pool_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              title: >-
                pool_coin specifies the pool coin that is a proof of liquidity
                provider for the pool
            withdrawn_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                withdrawn_coins specifies the amount of coins that are
                withdrawn.
            status:
              type: string
              enum:
                - REQUEST_STATUS_UNSPECIFIED
                - REQUEST_STATUS_NOT_EXECUTED
                - REQUEST_STATUS_SUCCEEDED
                - REQUEST_STATUS_FAILED
              default: REQUEST_STATUS_UNSPECIFIED
              description: |-
                RequestStatus enumerates request statuses.

                 - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
                 - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
                 - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
                 - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
          description: WithdrawRequest defines a withdraw request.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: >-
      QueryWithdrawRequestsResponse is response type for the
      Query/WithdrawRequests RPC method.
  squad.liquidity.v1beta1.RequestStatus:
    type: string
    enum:
      - REQUEST_STATUS_UNSPECIFIED
      - REQUEST_STATUS_NOT_EXECUTED
      - REQUEST_STATUS_SUCCEEDED
      - REQUEST_STATUS_FAILED
    default: REQUEST_STATUS_UNSPECIFIED
    description: |-
      RequestStatus enumerates request statuses.

       - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
       - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
       - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
       - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
  squad.liquidity.v1beta1.WithdrawRequest:
    type: object
    properties:
      id:
        type: string
        format: uint64
        title: id specifies the id for the request
      pool_id:
        type: string
        format: uint64
        title: pool_id specifies the pool id
      msg_height:
        type: string
        format: int64
        title: >-
          msg_height specifies the block height when the request is stored for
          the batch execution
      withdrawer:
        type: string
        title: >-
          withdrawer specifies the bech32-encoded address that withdraws pool
          coin from the pool
      pool_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        title: >-
          pool_coin specifies the pool coin that is a proof of liquidity
          provider for the pool
      withdrawn_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: withdrawn_coins specifies the amount of coins that are withdrawn.
      status:
        type: string
        enum:
          - REQUEST_STATUS_UNSPECIFIED
          - REQUEST_STATUS_NOT_EXECUTED
          - REQUEST_STATUS_SUCCEEDED
          - REQUEST_STATUS_FAILED
        default: REQUEST_STATUS_UNSPECIFIED
        description: |-
          RequestStatus enumerates request statuses.

           - REQUEST_STATUS_UNSPECIFIED: REQUEST_STATUS_UNSPECIFIED specifies unknown request status
           - REQUEST_STATUS_NOT_EXECUTED: REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
           - REQUEST_STATUS_SUCCEEDED: REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
           - REQUEST_STATUS_FAILED: REQUEST_STATUS_FAILED indicates the request is failed
    description: WithdrawRequest defines a withdraw request.
  squad.liquidstaking.v1beta1.LiquidValidatorState:
    type: object
    properties:
      operator_address:
        type: string
        description: >-
          operator_address defines the address of the validator's operator; bech
          encoded in JSON.
      weight:
        type: string
        title: 'weight specifies the weight for liquid staking, unstaking amount'
      status:
        title: status is the liquid validator status
        type: string
        enum:
          - VALIDATOR_STATUS_UNSPECIFIED
          - VALIDATOR_STATUS_ACTIVE
          - VALIDATOR_STATUS_INACTIVE
        default: VALIDATOR_STATUS_UNSPECIFIED
        description: |-
          ValidatorStatus enumerates the status of a liquid validator.

           - VALIDATOR_STATUS_UNSPECIFIED: VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
           - VALIDATOR_STATUS_ACTIVE: VALIDATOR_STATUS_ACTIVE defines the active, valid status
           - VALIDATOR_STATUS_INACTIVE: VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
      del_shares:
        type: string
        title: del_shares define the delegation shares of the validator
      liquid_tokens:
        type: string
        title: >-
          liquid_tokens define the token amount worth of delegation shares of
          the validator (slashing applied amount)
    description: >-
      LiquidValidatorState is type LiquidValidator with state added to return to
      query results.
  squad.liquidstaking.v1beta1.NetAmountState:
    type: object
    properties:
      mint_rate:
        type: string
        title: mint_rate is bTokenTotalSupply / NetAmount
      btoken_total_supply:
        type: string
        title: >-
          btoken_total_supply returns the total supply of
          btoken(liquid_bond_denom)
      net_amount:
        type: string
        title: >-
          net_amount is proxy account's native token balance + total liquid
          tokens + total remaining rewards + total

          unbonding balance
      total_del_shares:
        type: string
        title: total_del_shares define the delegation shares of all liquid validators
      total_liquid_tokens:
        type: string
        title: >-
          total_liquid_tokens define the token amount worth of delegation shares
          of all liquid validator (slashing applied

          amount)
      total_remaining_rewards:
        type: string
        title: >-
          total_remaining_rewards define the sum of remaining rewards of proxy
          account by all liquid validators
      total_unbonding_balance:
        type: string
        title: >-
          total_unbonding_balance define the unbonding balance of proxy account
          by all liquid validator (slashing applied

          amount)
      proxy_acc_balance:
        type: string
        title: >-
          proxy_acc_balance define the balance of proxy account for the native
          token
    description: >-
      NetAmountState is type for net amount raw data and mint rate, This is a
      value that depends on the several module

      state every time, so it is used only for calculation and query and is not
      stored in kv.
  squad.liquidstaking.v1beta1.Params:
    type: object
    properties:
      liquid_bond_denom:
        type: string
        description: >-
          LiquidBondDenom specifies the denomination of the token receiving
          after LiquidStaking, The value is calculated

          through NetAmount.
      whitelisted_validators:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
              title: >-
                validator_address defines the bech32-encoded address that
                whitelisted validator
            target_weight:
              type: string
              title: >-
                target_weight specifies the target weight for liquid staking,
                unstaking amount, which is a value for calculating

                the real weight to be derived according to the active status
          description: >-
            WhitelistedValidator consists of the validator operator address and
            the target weight, which is a value for

            calculating the real weight to be derived according to the active
            status. In the case of inactive, it is calculated

            as zero.
        description: >-
          WhitelistedValidators specifies the validators elected to become
          Active Liquid Validators.
      unstake_fee_rate:
        type: string
        title: >-
          UnstakeFeeRate specifies the fee rate when liquid unstake is
          requested, unbonded by subtracting it from

          unbondingAmount
      min_liquid_staking_amount:
        type: string
        description: >-
          MinLiquidStakingAmount specifies the minimum number of coins to be
          staked to the active liquid validators on liquid

          staking to minimize decimal loss and consider gas efficiency.
    description: Params defines the set of params for the liquidstaking module.
  squad.liquidstaking.v1beta1.QueryLiquidValidatorsResponse:
    type: object
    properties:
      liquid_validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            weight:
              type: string
              title: 'weight specifies the weight for liquid staking, unstaking amount'
            status:
              title: status is the liquid validator status
              type: string
              enum:
                - VALIDATOR_STATUS_UNSPECIFIED
                - VALIDATOR_STATUS_ACTIVE
                - VALIDATOR_STATUS_INACTIVE
              default: VALIDATOR_STATUS_UNSPECIFIED
              description: |-
                ValidatorStatus enumerates the status of a liquid validator.

                 - VALIDATOR_STATUS_UNSPECIFIED: VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
                 - VALIDATOR_STATUS_ACTIVE: VALIDATOR_STATUS_ACTIVE defines the active, valid status
                 - VALIDATOR_STATUS_INACTIVE: VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
            del_shares:
              type: string
              title: del_shares define the delegation shares of the validator
            liquid_tokens:
              type: string
              title: >-
                liquid_tokens define the token amount worth of delegation shares
                of the validator (slashing applied amount)
          description: >-
            LiquidValidatorState is type LiquidValidator with state added to
            return to query results.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryLiquidValidatorsResponse is the response type for the
      Query/LiquidValidators RPC method.
  squad.liquidstaking.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          liquid_bond_denom:
            type: string
            description: >-
              LiquidBondDenom specifies the denomination of the token receiving
              after LiquidStaking, The value is calculated

              through NetAmount.
          whitelisted_validators:
            type: array
            items:
              type: object
              properties:
                validator_address:
                  type: string
                  title: >-
                    validator_address defines the bech32-encoded address that
                    whitelisted validator
                target_weight:
                  type: string
                  title: >-
                    target_weight specifies the target weight for liquid
                    staking, unstaking amount, which is a value for calculating

                    the real weight to be derived according to the active status
              description: >-
                WhitelistedValidator consists of the validator operator address
                and the target weight, which is a value for

                calculating the real weight to be derived according to the
                active status. In the case of inactive, it is calculated

                as zero.
            description: >-
              WhitelistedValidators specifies the validators elected to become
              Active Liquid Validators.
          unstake_fee_rate:
            type: string
            title: >-
              UnstakeFeeRate specifies the fee rate when liquid unstake is
              requested, unbonded by subtracting it from

              unbondingAmount
          min_liquid_staking_amount:
            type: string
            description: >-
              MinLiquidStakingAmount specifies the minimum number of coins to be
              staked to the active liquid validators on liquid

              staking to minimize decimal loss and consider gas efficiency.
        description: Params defines the set of params for the liquidstaking module.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  squad.liquidstaking.v1beta1.QueryStatesResponse:
    type: object
    properties:
      net_amount_state:
        type: object
        properties:
          mint_rate:
            type: string
            title: mint_rate is bTokenTotalSupply / NetAmount
          btoken_total_supply:
            type: string
            title: >-
              btoken_total_supply returns the total supply of
              btoken(liquid_bond_denom)
          net_amount:
            type: string
            title: >-
              net_amount is proxy account's native token balance + total liquid
              tokens + total remaining rewards + total

              unbonding balance
          total_del_shares:
            type: string
            title: >-
              total_del_shares define the delegation shares of all liquid
              validators
          total_liquid_tokens:
            type: string
            title: >-
              total_liquid_tokens define the token amount worth of delegation
              shares of all liquid validator (slashing applied

              amount)
          total_remaining_rewards:
            type: string
            title: >-
              total_remaining_rewards define the sum of remaining rewards of
              proxy account by all liquid validators
          total_unbonding_balance:
            type: string
            title: >-
              total_unbonding_balance define the unbonding balance of proxy
              account by all liquid validator (slashing applied

              amount)
          proxy_acc_balance:
            type: string
            title: >-
              proxy_acc_balance define the balance of proxy account for the
              native token
        description: >-
          NetAmountState is type for net amount raw data and mint rate, This is
          a value that depends on the several module

          state every time, so it is used only for calculation and query and is
          not stored in kv.
    description: QueryStatesResponse is the response type for the Query/States RPC method.
  squad.liquidstaking.v1beta1.ValidatorStatus:
    type: string
    enum:
      - VALIDATOR_STATUS_UNSPECIFIED
      - VALIDATOR_STATUS_ACTIVE
      - VALIDATOR_STATUS_INACTIVE
    default: VALIDATOR_STATUS_UNSPECIFIED
    description: |-
      ValidatorStatus enumerates the status of a liquid validator.

       - VALIDATOR_STATUS_UNSPECIFIED: VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
       - VALIDATOR_STATUS_ACTIVE: VALIDATOR_STATUS_ACTIVE defines the active, valid status
       - VALIDATOR_STATUS_INACTIVE: VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
  squad.liquidstaking.v1beta1.WhitelistedValidator:
    type: object
    properties:
      validator_address:
        type: string
        title: >-
          validator_address defines the bech32-encoded address that whitelisted
          validator
      target_weight:
        type: string
        title: >-
          target_weight specifies the target weight for liquid staking,
          unstaking amount, which is a value for calculating

          the real weight to be derived according to the active status
    description: >-
      WhitelistedValidator consists of the validator operator address and the
      target weight, which is a value for

      calculating the real weight to be derived according to the active status.
      In the case of inactive, it is calculated

      as zero.
