// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: squad/auction/v1beta1/auction.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatusNil AuctionStatus = 0
	// AUCTION_STATUS_STANDBY defines the standby auction status
	AuctionStatusStandBy AuctionStatus = 1
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatusStarted AuctionStatus = 2
	// AUCTION_STATUS_VESTING defines the vesting auction status
	AuctionStatusVesting AuctionStatus = 3
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatusFinished AuctionStatus = 4
	// AUCTION_STATUS_CANCELLED defines the cancelled auction status
	AuctionStatusCancelled AuctionStatus = 5
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_STANDBY",
	2: "AUCTION_STATUS_STARTED",
	3: "AUCTION_STATUS_VESTING",
	4: "AUCTION_STATUS_FINISHED",
	5: "AUCTION_STATUS_CANCELLED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_STANDBY":     1,
	"AUCTION_STATUS_STARTED":     2,
	"AUCTION_STATUS_VESTING":     3,
	"AUCTION_STATUS_FINISHED":    4,
	"AUCTION_STATUS_CANCELLED":   5,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3716a3e3743e2baa, []int{0}
}

type Auction struct {
	Id                    uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Auctioneer            string     `protobuf:"bytes,2,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	Custom                *types.Any `protobuf:"bytes,3,opt,name=custom,proto3" json:"custom,omitempty"`
	SellingReserveAddress string     `protobuf:"bytes,4,opt,name=selling_reserve_address,json=sellingReserveAddress,proto3" json:"selling_reserve_address,omitempty"`
	PayingReserveAddress  string     `protobuf:"bytes,5,opt,name=paying_reserve_address,json=payingReserveAddress,proto3" json:"paying_reserve_address,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3716a3e3743e2baa, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

type FixedPriceAuction struct {
	Auctioneer           string                                 `protobuf:"bytes,1,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	StartPrice           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=start_price,json=startPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"start_price"`
	SellingCoin          types1.Coin                            `protobuf:"bytes,3,opt,name=selling_coin,json=sellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"selling_coin"`
	RemainingSellingCoin types1.Coin                            `protobuf:"bytes,4,opt,name=remaining_selling_coin,json=remainingSellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"remaining_selling_coin"`
	PayingCoinDenom      string                                 `protobuf:"bytes,5,opt,name=paying_coin_denom,json=payingCoinDenom,proto3" json:"paying_coin_denom,omitempty"`
	StartTime            time.Time                              `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime              time.Time                              `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	Status               AuctionStatus                          `protobuf:"varint,8,opt,name=status,proto3,enum=squad.auction.v1beta1.AuctionStatus" json:"status,omitempty"`
}

func (m *FixedPriceAuction) Reset()         { *m = FixedPriceAuction{} }
func (m *FixedPriceAuction) String() string { return proto.CompactTextString(m) }
func (*FixedPriceAuction) ProtoMessage()    {}
func (*FixedPriceAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3716a3e3743e2baa, []int{1}
}
func (m *FixedPriceAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedPriceAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedPriceAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedPriceAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedPriceAuction.Merge(m, src)
}
func (m *FixedPriceAuction) XXX_Size() int {
	return m.Size()
}
func (m *FixedPriceAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedPriceAuction.DiscardUnknown(m)
}

var xxx_messageInfo_FixedPriceAuction proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("squad.auction.v1beta1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*Auction)(nil), "squad.auction.v1beta1.Auction")
	proto.RegisterType((*FixedPriceAuction)(nil), "squad.auction.v1beta1.FixedPriceAuction")
}

func init() {
	proto.RegisterFile("squad/auction/v1beta1/auction.proto", fileDescriptor_3716a3e3743e2baa)
}

var fileDescriptor_3716a3e3743e2baa = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x4f, 0xdb, 0x48,
	0x18, 0x8d, 0x43, 0x08, 0x30, 0xec, 0xb2, 0xc1, 0x0a, 0xac, 0xf1, 0xc1, 0xb1, 0xd8, 0xd5, 0x6e,
	0x84, 0x84, 0x5d, 0x28, 0xaa, 0x50, 0x55, 0xa9, 0x4a, 0x9c, 0xa4, 0x8d, 0x84, 0x0c, 0xb2, 0x03,
	0x52, 0x7b, 0xb1, 0x1c, 0x7b, 0x1a, 0xac, 0xc6, 0x76, 0xea, 0x99, 0x20, 0x72, 0xeb, 0xb1, 0xca,
	0x89, 0x3f, 0x90, 0x53, 0x6f, 0x3d, 0xf7, 0x47, 0xa0, 0x9e, 0x50, 0x4f, 0x55, 0x0f, 0x50, 0xe0,
	0x1f, 0xf4, 0x17, 0x54, 0xe3, 0x19, 0x47, 0x38, 0xe4, 0xd0, 0x4a, 0x3d, 0x25, 0x33, 0xef, 0xbd,
	0xef, 0x7d, 0x9f, 0xbf, 0x67, 0x83, 0x7f, 0xd0, 0x9b, 0xbe, 0xed, 0xaa, 0x76, 0xdf, 0xc1, 0x5e,
	0x18, 0xa8, 0x27, 0x5b, 0x6d, 0x88, 0xed, 0xad, 0xe4, 0xac, 0xf4, 0xa2, 0x10, 0x87, 0xfc, 0x4a,
	0x4c, 0x52, 0x92, 0x4b, 0x46, 0x12, 0x8b, 0x9d, 0xb0, 0x13, 0xc6, 0x0c, 0x95, 0xfc, 0xa3, 0x64,
	0x71, 0xcd, 0x09, 0x91, 0x1f, 0x22, 0x8b, 0x02, 0xf4, 0xc0, 0x20, 0x89, 0x9e, 0xd4, 0xb6, 0x8d,
	0xe0, 0xd8, 0xca, 0x09, 0xbd, 0x20, 0x91, 0x76, 0xc2, 0xb0, 0xd3, 0x85, 0x6a, 0x7c, 0x6a, 0xf7,
	0x5f, 0xa9, 0x76, 0x30, 0x60, 0x50, 0x69, 0x12, 0xc2, 0x9e, 0x0f, 0x11, 0xb6, 0xfd, 0x1e, 0x25,
	0xac, 0x5f, 0x73, 0x60, 0xae, 0x42, 0x1b, 0xe4, 0x97, 0x40, 0xd6, 0x73, 0x05, 0x4e, 0xe6, 0xca,
	0x39, 0x23, 0xeb, 0xb9, 0xbc, 0x04, 0x00, 0xeb, 0x1d, 0xc2, 0x48, 0xc8, 0xca, 0x5c, 0x79, 0xc1,
	0xb8, 0x73, 0xc3, 0xef, 0x82, 0xbc, 0xd3, 0x47, 0x38, 0xf4, 0x85, 0x19, 0x99, 0x2b, 0x2f, 0x6e,
	0x17, 0x15, 0xea, 0xa6, 0x24, 0x6e, 0x4a, 0x25, 0x18, 0x54, 0xc1, 0xa7, 0x8f, 0x9b, 0x79, 0x2d,
	0xe6, 0x19, 0x8c, 0xcf, 0x3f, 0x02, 0x7f, 0x23, 0xd8, 0xed, 0x7a, 0x41, 0xc7, 0x8a, 0x20, 0x82,
	0xd1, 0x09, 0xb4, 0x6c, 0xd7, 0x8d, 0x20, 0x42, 0x42, 0x2e, 0xb6, 0x59, 0x61, 0xb0, 0x41, 0xd1,
	0x0a, 0x05, 0xf9, 0x1d, 0xb0, 0xda, 0xb3, 0x07, 0xd3, 0x64, 0xb3, 0xb1, 0xac, 0x48, 0xd1, 0xb4,
	0x6a, 0xfd, 0x7b, 0x0e, 0x2c, 0x37, 0xbc, 0x53, 0xe8, 0x1e, 0x44, 0x9e, 0x03, 0x93, 0x69, 0xd3,
	0xd3, 0x71, 0xf7, 0xa6, 0xdb, 0x07, 0x8b, 0x08, 0xdb, 0x11, 0xb6, 0x7a, 0x44, 0x45, 0xc7, 0xaf,
	0x2a, 0xe7, 0x97, 0xa5, 0xcc, 0xd7, 0xcb, 0xd2, 0x7f, 0x1d, 0x0f, 0x1f, 0xf7, 0xdb, 0x8a, 0x13,
	0xfa, 0x6c, 0x57, 0xec, 0x67, 0x13, 0xb9, 0xaf, 0x55, 0x3c, 0xe8, 0x41, 0xa4, 0xd4, 0xa0, 0x63,
	0x80, 0xb8, 0x44, 0xec, 0xcb, 0xfb, 0xe0, 0x8f, 0x64, 0x68, 0xb2, 0x3c, 0xf6, 0xd0, 0xd6, 0x14,
	0xb6, 0x6b, 0xb2, 0xdd, 0x24, 0x23, 0x8a, 0x16, 0x7a, 0x41, 0x55, 0x25, 0x66, 0x1f, 0xae, 0x4a,
	0xff, 0xff, 0x84, 0x19, 0x11, 0x18, 0x8b, 0xac, 0x3e, 0x39, 0xf0, 0x6f, 0x39, 0xb0, 0x1a, 0x41,
	0xdf, 0xf6, 0x02, 0xe2, 0x98, 0x72, 0xce, 0xfd, 0x76, 0xe7, 0xe2, 0xd8, 0xc9, 0xbc, 0xd3, 0xc2,
	0x06, 0x58, 0x66, 0xeb, 0x22, 0xb6, 0x96, 0x0b, 0x83, 0xd0, 0x67, 0x9b, 0xfa, 0x8b, 0x02, 0x84,
	0x56, 0x23, 0xd7, 0xbc, 0x06, 0xe8, 0xb3, 0xb2, 0x48, 0x42, 0x85, 0x7c, 0xdc, 0xa1, 0x78, 0x2f,
	0x50, 0xad, 0x24, 0xbe, 0xd5, 0x79, 0xd2, 0xe2, 0xd9, 0x55, 0x89, 0x33, 0x16, 0x62, 0x1d, 0x41,
	0xf8, 0xa7, 0x60, 0x1e, 0x06, 0x2e, 0x2d, 0x31, 0xf7, 0x0b, 0x25, 0xe6, 0x60, 0xe0, 0xc6, 0x05,
	0x9e, 0x80, 0x3c, 0xc2, 0x36, 0xee, 0x23, 0x61, 0x5e, 0xe6, 0xca, 0x4b, 0xdb, 0xff, 0x2a, 0x53,
	0xdf, 0x61, 0x85, 0x85, 0xc8, 0x8c, 0xb9, 0x06, 0xd3, 0x3c, 0x06, 0x9f, 0xc7, 0x51, 0xdf, 0xb8,
	0xca, 0x82, 0x3f, 0x53, 0x2c, 0x7e, 0x07, 0x88, 0x95, 0x43, 0xad, 0xd5, 0xdc, 0xd7, 0x2d, 0xb3,
	0x55, 0x69, 0x1d, 0x9a, 0xd6, 0xa1, 0x6e, 0x1e, 0xd4, 0xb5, 0x66, 0xa3, 0x59, 0xaf, 0x15, 0x32,
	0x62, 0x71, 0x38, 0x92, 0x0b, 0x29, 0x89, 0xee, 0x75, 0x49, 0xe4, 0x27, 0x54, 0x66, 0xab, 0xa2,
	0xd7, 0xaa, 0x2f, 0x0a, 0x9c, 0x28, 0x0c, 0x47, 0x72, 0x31, 0xa5, 0x30, 0xb1, 0x1d, 0xb8, 0xd5,
	0xc1, 0x74, 0x95, 0xd1, 0xaa, 0xd7, 0x0a, 0xd9, 0xe9, 0xaa, 0x08, 0x43, 0x77, 0x8a, 0xea, 0xa8,
	0x6e, 0xb6, 0x9a, 0xfa, 0xb3, 0xc2, 0xcc, 0x14, 0xd5, 0x11, 0x44, 0xd8, 0x0b, 0x3a, 0xe4, 0x65,
	0x9e, 0x50, 0x35, 0x9a, 0x7a, 0xd3, 0x7c, 0x5e, 0xaf, 0x15, 0x72, 0xe2, 0xda, 0x70, 0x24, 0xaf,
	0xa4, 0x64, 0x0d, 0x2f, 0xf0, 0xd0, 0x31, 0x74, 0xf9, 0x5d, 0x20, 0x4c, 0xe8, 0xb4, 0x8a, 0xae,
	0xd5, 0xf7, 0xf6, 0xea, 0xb5, 0xc2, 0xac, 0x28, 0x0e, 0x47, 0xf2, 0x6a, 0x4a, 0xa8, 0xd9, 0x81,
	0x03, 0xbb, 0x5d, 0xe8, 0x8a, 0xb9, 0x77, 0xef, 0xa5, 0x4c, 0x55, 0x3f, 0xbf, 0x96, 0x32, 0xe7,
	0x37, 0x12, 0x77, 0x71, 0x23, 0x71, 0xdf, 0x6e, 0x24, 0xee, 0xec, 0x56, 0xca, 0x5c, 0xdc, 0x4a,
	0x99, 0x2f, 0xb7, 0x52, 0xe6, 0xe5, 0x83, 0x7b, 0xd1, 0x25, 0x8b, 0xdc, 0xec, 0xda, 0x6d, 0xa4,
	0xd2, 0x8f, 0xf7, 0xe9, 0xf8, 0xf3, 0x1d, 0x07, 0xb9, 0x9d, 0x8f, 0x23, 0xf2, 0xf0, 0x47, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3e, 0x03, 0x0d, 0xd9, 0xdc, 0x05, 0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayingReserveAddress) > 0 {
		i -= len(m.PayingReserveAddress)
		copy(dAtA[i:], m.PayingReserveAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.PayingReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SellingReserveAddress) > 0 {
		i -= len(m.SellingReserveAddress)
		copy(dAtA[i:], m.SellingReserveAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.SellingReserveAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixedPriceAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedPriceAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedPriceAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAuction(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintAuction(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	if len(m.PayingCoinDenom) > 0 {
		i -= len(m.PayingCoinDenom)
		copy(dAtA[i:], m.PayingCoinDenom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.PayingCoinDenom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.RemainingSellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.StartPrice.Size()
		i -= size
		if _, err := m.StartPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.SellingReserveAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.PayingReserveAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *FixedPriceAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.StartPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.SellingCoin.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.RemainingSellingCoin.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.PayingCoinDenom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.Status != 0 {
		n += 1 + sovAuction(uint64(m.Status))
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Custom == nil {
				m.Custom = &types.Any{}
			}
			if err := m.Custom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedPriceAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedPriceAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedPriceAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingSellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingSellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
