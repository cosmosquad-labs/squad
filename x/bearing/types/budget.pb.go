// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/farming/v1beta1/bearing.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the bearing module.
type Params struct {
	// The universal epoch length in number of blocks
	// A collection of bearings is executed with this epoch_blocks parameter
	EpochBlocks uint32 `protobuf:"varint,1,opt,name=epoch_blocks,json=epochBlocks,proto3" json:"epoch_blocks,omitempty" yaml:"epoch_blocks"`
	// Bearings parameter can be added, modified, and deleted through
	// parameter change governance proposal
	Bearings []Bearing `protobuf:"bytes,2,rep,name=bearings,proto3" json:"bearings" yaml:"bearings"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df5cca239dd8691, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEpochBlocks() uint32 {
	if m != nil {
		return m.EpochBlocks
	}
	return 0
}

func (m *Params) GetBearings() []Bearing {
	if m != nil {
		return m.Bearings
	}
	return nil
}

// Bearing defines a bearing object.
type Bearing struct {
	// name defines the name of the bearing
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// rate specifies the distributing amount by ratio of total bearing source
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate" yaml:"rate"`
	// source_address defines the bech32-encoded address that source of the bearing
	SourceAddress string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty" yaml:"source_address"`
	// destination_address defines the bech32-encoded address of the bearing pool to distribute
	DestinationAddress string `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty" yaml:"destination_address"`
	// start_time specifies the start time of the bearing
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the bearing
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
}

func (m *Bearing) Reset()      { *m = Bearing{} }
func (*Bearing) ProtoMessage() {}
func (*Bearing) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df5cca239dd8691, []int{1}
}
func (m *Bearing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bearing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bearing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bearing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bearing.Merge(m, src)
}
func (m *Bearing) XXX_Size() int {
	return m.Size()
}
func (m *Bearing) XXX_DiscardUnknown() {
	xxx_messageInfo_Bearing.DiscardUnknown(m)
}

var xxx_messageInfo_Bearing proto.InternalMessageInfo

// TotalCollectedCoins defines total collected coins with relevant metadata.
type TotalCollectedCoins struct {
	// total_collected_coins specifies the total collected coins in a bearing ever since the bearing is created
	TotalCollectedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total_collected_coins,json=totalCollectedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_collected_coins" yaml:"total_collected_coins"`
}

func (m *TotalCollectedCoins) Reset()         { *m = TotalCollectedCoins{} }
func (m *TotalCollectedCoins) String() string { return proto.CompactTextString(m) }
func (*TotalCollectedCoins) ProtoMessage()    {}
func (*TotalCollectedCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df5cca239dd8691, []int{2}
}
func (m *TotalCollectedCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalCollectedCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalCollectedCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalCollectedCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalCollectedCoins.Merge(m, src)
}
func (m *TotalCollectedCoins) XXX_Size() int {
	return m.Size()
}
func (m *TotalCollectedCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalCollectedCoins.DiscardUnknown(m)
}

var xxx_messageInfo_TotalCollectedCoins proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "cosmos.bearing.v1beta1.Params")
	proto.RegisterType((*Bearing)(nil), "cosmos.bearing.v1beta1.Bearing")
	proto.RegisterType((*TotalCollectedCoins)(nil), "cosmos.bearing.v1beta1.TotalCollectedCoins")
}

func init() {
	proto.RegisterFile("tendermint/farming/v1beta1/bearing.proto", fileDescriptor_9df5cca239dd8691)
}

var fileDescriptor_9df5cca239dd8691 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xed, 0x26, 0xa4, 0xed, 0x86, 0xb6, 0xc2, 0x21, 0x90, 0x04, 0xea, 0x8d, 0x8c, 0x54,
	0x45, 0x42, 0xd8, 0x6a, 0xb9, 0x45, 0x42, 0x02, 0x17, 0xce, 0x2d, 0x56, 0x0f, 0x88, 0x8b, 0xb5,
	0xb6, 0x17, 0xd7, 0xaa, 0xed, 0x8d, 0xbc, 0x1b, 0x44, 0xdf, 0x80, 0x63, 0x8f, 0x48, 0x1c, 0xe8,
	0x99, 0x77, 0xe0, 0x5e, 0x89, 0x4b, 0x8f, 0x88, 0x83, 0x8b, 0x92, 0x37, 0xc8, 0x13, 0xa0, 0xfd,
	0xe3, 0x10, 0xd4, 0x48, 0xed, 0x29, 0x9e, 0x99, 0x6f, 0x7e, 0x3b, 0x3b, 0xfb, 0x29, 0x60, 0x87,
	0xe1, 0x3c, 0xc2, 0x45, 0x96, 0xe4, 0xcc, 0x09, 0xc6, 0x51, 0x8c, 0x99, 0xf3, 0x71, 0x37, 0xc0,
	0x0c, 0xed, 0xaa, 0xd0, 0x1e, 0x15, 0x84, 0x11, 0xa3, 0x1d, 0x12, 0x9a, 0x11, 0x6a, 0xab, 0xa4,
	0xd2, 0xf4, 0xee, 0xc7, 0x24, 0x26, 0x42, 0xe1, 0xf0, 0x2f, 0x29, 0xee, 0x75, 0xa5, 0xd8, 0x97,
	0x05, 0xd5, 0x29, 0x4b, 0xa6, 0x8c, 0x9c, 0x00, 0x51, 0x3c, 0x3f, 0x29, 0x24, 0x49, 0xae, 0xea,
	0x30, 0x26, 0x24, 0x4e, 0xb1, 0x23, 0xa2, 0x60, 0xfc, 0xc1, 0x61, 0x49, 0x86, 0x29, 0x43, 0xd9,
	0xe8, 0x76, 0x00, 0xeb, 0xab, 0x0e, 0x1a, 0x87, 0xa8, 0x40, 0x19, 0x35, 0x86, 0xe0, 0x2e, 0x1e,
	0x91, 0xf0, 0xd8, 0x0f, 0x52, 0x12, 0x9e, 0xd0, 0x8e, 0xde, 0xd7, 0x07, 0x1b, 0xee, 0xc3, 0x59,
	0x09, 0x5b, 0xa7, 0x28, 0x4b, 0x87, 0xd6, 0x62, 0xd5, 0xf2, 0x9a, 0x22, 0x74, 0x45, 0x64, 0x1c,
	0x80, 0x55, 0x79, 0x55, 0xda, 0x59, 0xe9, 0xd7, 0x06, 0xcd, 0xbd, 0x6d, 0x7b, 0xe9, 0x06, 0x6c,
	0x57, 0x84, 0xee, 0x83, 0x8b, 0x12, 0x6a, 0xb3, 0x12, 0x6e, 0x4a, 0xb2, 0xea, 0xb5, 0xbc, 0x8a,
	0x32, 0xac, 0x7f, 0x39, 0x87, 0x9a, 0xf5, 0xb3, 0x06, 0x1a, 0xb2, 0xc3, 0x78, 0x02, 0xea, 0x39,
	0xca, 0xb0, 0x98, 0x6a, 0xdd, 0xdd, 0x9a, 0x95, 0xb0, 0x29, 0x7b, 0x79, 0xd6, 0xf2, 0x44, 0xd1,
	0x78, 0x0b, 0xea, 0x05, 0x62, 0xb8, 0xb3, 0x22, 0x44, 0x2f, 0xf8, 0x21, 0xbf, 0x4b, 0xb8, 0x13,
	0x27, 0xec, 0x78, 0x1c, 0xd8, 0x21, 0xc9, 0xd4, 0x76, 0xd5, 0xcf, 0x33, 0x1a, 0x9d, 0x38, 0xec,
	0x74, 0x84, 0xa9, 0xfd, 0x1a, 0x87, 0xff, 0x90, 0x9c, 0x61, 0x79, 0x02, 0x65, 0xbc, 0x04, 0x9b,
	0x94, 0x8c, 0x8b, 0x10, 0xfb, 0x28, 0x8a, 0x0a, 0x4c, 0x69, 0xa7, 0x26, 0xe0, 0xdd, 0x59, 0x09,
	0xdb, 0x52, 0xfe, 0x7f, 0xdd, 0xf2, 0x36, 0x64, 0xe2, 0x95, 0x8c, 0x8d, 0x03, 0xd0, 0x8a, 0x30,
	0x65, 0x49, 0x8e, 0x58, 0x42, 0xf2, 0x39, 0xa6, 0x2e, 0x30, 0xe6, 0xac, 0x84, 0x3d, 0x89, 0x59,
	0x22, 0xb2, 0x3c, 0x63, 0x21, 0x5b, 0x01, 0xdf, 0x01, 0x40, 0x19, 0x2a, 0x98, 0xcf, 0x1f, 0xbb,
	0x73, 0xa7, 0xaf, 0x0f, 0x9a, 0x7b, 0x3d, 0x5b, 0x3a, 0xc1, 0xae, 0x9c, 0x60, 0x1f, 0x55, 0x4e,
	0x70, 0xb7, 0xd5, 0xb2, 0xef, 0xa9, 0x71, 0xe7, 0xbd, 0xd6, 0xd9, 0x15, 0xd4, 0xbd, 0x75, 0x91,
	0xe0, 0x72, 0xc3, 0x03, 0x6b, 0x38, 0x8f, 0x24, 0xb7, 0x71, 0x23, 0xf7, 0x91, 0xe2, 0x6e, 0x29,
	0x7b, 0xa8, 0x4e, 0x49, 0x5d, 0xc5, 0x79, 0xc4, 0xa5, 0xc3, 0xb5, 0xcf, 0xe7, 0x50, 0x13, 0xaf,
	0xf9, 0x43, 0x07, 0xad, 0x23, 0xc2, 0x50, 0xba, 0x4f, 0xd2, 0x14, 0x87, 0x0c, 0x47, 0xfb, 0x24,
	0xc9, 0xa9, 0xf1, 0x4d, 0x07, 0x6d, 0xc6, 0xf3, 0x7e, 0x58, 0x15, 0x7c, 0x6e, 0x51, 0x6e, 0x41,
	0xee, 0xa5, 0xee, 0xdc, 0x4b, 0x88, 0xe2, 0xb9, 0x93, 0x78, 0xaf, 0x7b, 0xa8, 0x46, 0x78, 0x2c,
	0x47, 0x58, 0x4a, 0xb1, 0xbe, 0x5f, 0xc1, 0xc1, 0x2d, 0x2c, 0x20, 0x86, 0xf1, 0x5a, 0xec, 0xfa,
	0x84, 0xc3, 0x3a, 0xbf, 0x83, 0xfb, 0xe6, 0x62, 0x62, 0xea, 0x97, 0x13, 0x53, 0xff, 0x33, 0x31,
	0xf5, 0xb3, 0xa9, 0xa9, 0x5d, 0x4e, 0x4d, 0xed, 0xd7, 0xd4, 0xd4, 0xde, 0x3f, 0x5d, 0xc0, 0x5f,
	0xff, 0x87, 0xf8, 0x54, 0x7d, 0x88, 0x73, 0x82, 0x86, 0x58, 0xe5, 0xf3, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe6, 0xce, 0xde, 0xc1, 0x4c, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bearings) > 0 {
		for iNdEx := len(m.Bearings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bearings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBearing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochBlocks != 0 {
		i = encodeVarintBearing(dAtA, i, uint64(m.EpochBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bearing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bearing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bearing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBearing(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBearing(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintBearing(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintBearing(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBearing(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBearing(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalCollectedCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalCollectedCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalCollectedCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalCollectedCoins) > 0 {
		for iNdEx := len(m.TotalCollectedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalCollectedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBearing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBearing(dAtA []byte, offset int, v uint64) int {
	offset -= sovBearing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochBlocks != 0 {
		n += 1 + sovBearing(uint64(m.EpochBlocks))
	}
	if len(m.Bearings) > 0 {
		for _, e := range m.Bearings {
			l = e.Size()
			n += 1 + l + sovBearing(uint64(l))
		}
	}
	return n
}

func (m *Bearing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBearing(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovBearing(uint64(l))
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovBearing(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovBearing(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovBearing(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovBearing(uint64(l))
	return n
}

func (m *TotalCollectedCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalCollectedCoins) > 0 {
		for _, e := range m.TotalCollectedCoins {
			l = e.Size()
			n += 1 + l + sovBearing(uint64(l))
		}
	}
	return n
}

func sovBearing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBearing(x uint64) (n int) {
	return sovBearing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBearing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBlocks", wireType)
			}
			m.EpochBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bearings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bearings = append(m.Bearings, Bearing{})
			if err := m.Bearings[len(m.Bearings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBearing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBearing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bearing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBearing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bearing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bearing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBearing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBearing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalCollectedCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBearing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalCollectedCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalCollectedCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollectedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBearing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBearing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCollectedCoins = append(m.TotalCollectedCoins, types.Coin{})
			if err := m.TotalCollectedCoins[len(m.TotalCollectedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBearing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBearing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBearing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBearing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBearing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBearing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBearing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBearing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBearing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBearing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBearing = fmt.Errorf("proto: unexpected end of group")
)
