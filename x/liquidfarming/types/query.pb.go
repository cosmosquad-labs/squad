// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: squad/liquidfarming/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryLiquidFarmsRequest is the request type for the Query/LiquidFarms RPC method.
type QueryLiquidFarmsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidFarmsRequest) Reset()         { *m = QueryLiquidFarmsRequest{} }
func (m *QueryLiquidFarmsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidFarmsRequest) ProtoMessage()    {}
func (*QueryLiquidFarmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{0}
}
func (m *QueryLiquidFarmsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidFarmsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidFarmsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidFarmsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidFarmsRequest.Merge(m, src)
}
func (m *QueryLiquidFarmsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidFarmsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidFarmsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidFarmsRequest proto.InternalMessageInfo

func (m *QueryLiquidFarmsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLiquidFarmsResponse is response type for the Query/LiquidFarms RPC method.
type QueryLiquidFarmsResponse struct {
	LiquidFarms []LiquidFarmResponse `protobuf:"bytes,1,rep,name=liquid_farms,json=liquidFarms,proto3" json:"liquid_farms"`
}

func (m *QueryLiquidFarmsResponse) Reset()         { *m = QueryLiquidFarmsResponse{} }
func (m *QueryLiquidFarmsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidFarmsResponse) ProtoMessage()    {}
func (*QueryLiquidFarmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{1}
}
func (m *QueryLiquidFarmsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidFarmsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidFarmsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidFarmsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidFarmsResponse.Merge(m, src)
}
func (m *QueryLiquidFarmsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidFarmsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidFarmsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidFarmsResponse proto.InternalMessageInfo

func (m *QueryLiquidFarmsResponse) GetLiquidFarms() []LiquidFarmResponse {
	if m != nil {
		return m.LiquidFarms
	}
	return nil
}

// QueryLiquidFarmRequest is the request type for the Query/LiquidFarm RPC method.
type QueryLiquidFarmRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryLiquidFarmRequest) Reset()         { *m = QueryLiquidFarmRequest{} }
func (m *QueryLiquidFarmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidFarmRequest) ProtoMessage()    {}
func (*QueryLiquidFarmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{2}
}
func (m *QueryLiquidFarmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidFarmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidFarmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidFarmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidFarmRequest.Merge(m, src)
}
func (m *QueryLiquidFarmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidFarmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidFarmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidFarmRequest proto.InternalMessageInfo

func (m *QueryLiquidFarmRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// QueryLiquidFarmResponse is response type for the Query/LiquidFarm RPC method.
type QueryLiquidFarmResponse struct {
	LiquidFarm LiquidFarmResponse `protobuf:"bytes,1,opt,name=liquid_farm,json=liquidFarm,proto3" json:"liquid_farm"`
}

func (m *QueryLiquidFarmResponse) Reset()         { *m = QueryLiquidFarmResponse{} }
func (m *QueryLiquidFarmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidFarmResponse) ProtoMessage()    {}
func (*QueryLiquidFarmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{3}
}
func (m *QueryLiquidFarmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidFarmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidFarmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidFarmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidFarmResponse.Merge(m, src)
}
func (m *QueryLiquidFarmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidFarmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidFarmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidFarmResponse proto.InternalMessageInfo

func (m *QueryLiquidFarmResponse) GetLiquidFarm() LiquidFarmResponse {
	if m != nil {
		return m.LiquidFarm
	}
	return LiquidFarmResponse{}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryQueuedFarmingsRequest is request type for the Query/QueuedFarmings RPC method.
type QueryQueuedFarmingsRequest struct {
	PoolId     uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQueuedFarmingsRequest) Reset()         { *m = QueryQueuedFarmingsRequest{} }
func (m *QueryQueuedFarmingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueuedFarmingsRequest) ProtoMessage()    {}
func (*QueryQueuedFarmingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{6}
}
func (m *QueryQueuedFarmingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueuedFarmingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueuedFarmingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueuedFarmingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueuedFarmingsRequest.Merge(m, src)
}
func (m *QueryQueuedFarmingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueuedFarmingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueuedFarmingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueuedFarmingsRequest proto.InternalMessageInfo

func (m *QueryQueuedFarmingsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryQueuedFarmingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQueuedFarmingsResponse is response type for the Query/QueuedFarmings RPC method.
type QueryQueuedFarmingsResponse struct {
	QueuedFarmings []QueuedFarming     `protobuf:"bytes,1,rep,name=queued_farmings,json=queuedFarmings,proto3" json:"queued_farmings"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQueuedFarmingsResponse) Reset()         { *m = QueryQueuedFarmingsResponse{} }
func (m *QueryQueuedFarmingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueuedFarmingsResponse) ProtoMessage()    {}
func (*QueryQueuedFarmingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{7}
}
func (m *QueryQueuedFarmingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueuedFarmingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueuedFarmingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueuedFarmingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueuedFarmingsResponse.Merge(m, src)
}
func (m *QueryQueuedFarmingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueuedFarmingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueuedFarmingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueuedFarmingsResponse proto.InternalMessageInfo

func (m *QueryQueuedFarmingsResponse) GetQueuedFarmings() []QueuedFarming {
	if m != nil {
		return m.QueuedFarmings
	}
	return nil
}

func (m *QueryQueuedFarmingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQueuedFarmingRequest is request type for the Query/QueuedFarming RPC method.
type QueryQueuedFarmingRequest struct {
	PoolId    uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RequestId uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryQueuedFarmingRequest) Reset()         { *m = QueryQueuedFarmingRequest{} }
func (m *QueryQueuedFarmingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueuedFarmingRequest) ProtoMessage()    {}
func (*QueryQueuedFarmingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{8}
}
func (m *QueryQueuedFarmingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueuedFarmingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueuedFarmingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueuedFarmingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueuedFarmingRequest.Merge(m, src)
}
func (m *QueryQueuedFarmingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueuedFarmingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueuedFarmingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueuedFarmingRequest proto.InternalMessageInfo

func (m *QueryQueuedFarmingRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryQueuedFarmingRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// QueryQueuedFarmingResponse is response type for the Query/QueuedFarming RPC method.
type QueryQueuedFarmingResponse struct {
	QueuedFarming QueuedFarming `protobuf:"bytes,1,opt,name=queued_farming,json=queuedFarming,proto3" json:"queued_farming"`
}

func (m *QueryQueuedFarmingResponse) Reset()         { *m = QueryQueuedFarmingResponse{} }
func (m *QueryQueuedFarmingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueuedFarmingResponse) ProtoMessage()    {}
func (*QueryQueuedFarmingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{9}
}
func (m *QueryQueuedFarmingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueuedFarmingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueuedFarmingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueuedFarmingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueuedFarmingResponse.Merge(m, src)
}
func (m *QueryQueuedFarmingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueuedFarmingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueuedFarmingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueuedFarmingResponse proto.InternalMessageInfo

func (m *QueryQueuedFarmingResponse) GetQueuedFarming() QueuedFarming {
	if m != nil {
		return m.QueuedFarming
	}
	return QueuedFarming{}
}

// QueryBidsRequest is request type for the Query/Bids RPC method.
type QueryBidsRequest struct {
	PoolId     uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Bidder     string             `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBidsRequest) Reset()         { *m = QueryBidsRequest{} }
func (m *QueryBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidsRequest) ProtoMessage()    {}
func (*QueryBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{10}
}
func (m *QueryBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsRequest.Merge(m, src)
}
func (m *QueryBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsRequest proto.InternalMessageInfo

func (m *QueryBidsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryBidsRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryBidsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBidsResponse is response type for the Query/Bids RPC method.
type QueryBidsResponse struct {
	Bids       []Bid               `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBidsResponse) Reset()         { *m = QueryBidsResponse{} }
func (m *QueryBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidsResponse) ProtoMessage()    {}
func (*QueryBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{11}
}
func (m *QueryBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsResponse.Merge(m, src)
}
func (m *QueryBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsResponse proto.InternalMessageInfo

func (m *QueryBidsResponse) GetBids() []Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *QueryBidsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBidRequest is the request type for the Query/Sequence RPC method.
type QueryBidRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BidId  uint64 `protobuf:"varint,2,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
}

func (m *QueryBidRequest) Reset()         { *m = QueryBidRequest{} }
func (m *QueryBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidRequest) ProtoMessage()    {}
func (*QueryBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{12}
}
func (m *QueryBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidRequest.Merge(m, src)
}
func (m *QueryBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidRequest proto.InternalMessageInfo

func (m *QueryBidRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryBidRequest) GetBidId() uint64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

// QueryBidResponse is response type for the Query/Sequence RPC method.
type QueryBidResponse struct {
	Bid Bid `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid"`
}

func (m *QueryBidResponse) Reset()         { *m = QueryBidResponse{} }
func (m *QueryBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidResponse) ProtoMessage()    {}
func (*QueryBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{13}
}
func (m *QueryBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidResponse.Merge(m, src)
}
func (m *QueryBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidResponse proto.InternalMessageInfo

func (m *QueryBidResponse) GetBid() Bid {
	if m != nil {
		return m.Bid
	}
	return Bid{}
}

// QueryRewardsAuctionsRequest is request type for the Query/RewardsAuctions RPC method.
type QueryRewardsAuctionsRequest struct {
	AuctionId  uint64             `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsAuctionsRequest) Reset()         { *m = QueryRewardsAuctionsRequest{} }
func (m *QueryRewardsAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsAuctionsRequest) ProtoMessage()    {}
func (*QueryRewardsAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{14}
}
func (m *QueryRewardsAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsAuctionsRequest.Merge(m, src)
}
func (m *QueryRewardsAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsAuctionsRequest proto.InternalMessageInfo

func (m *QueryRewardsAuctionsRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryRewardsAuctionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardsAuctionsResponse is response type for the Query/RewardsAuctions RPC method.
type QueryRewardsAuctionsResponse struct {
	RewardAuctions []RewardsAuction    `protobuf:"bytes,1,rep,name=reward_auctions,json=rewardAuctions,proto3" json:"reward_auctions"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsAuctionsResponse) Reset()         { *m = QueryRewardsAuctionsResponse{} }
func (m *QueryRewardsAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsAuctionsResponse) ProtoMessage()    {}
func (*QueryRewardsAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{15}
}
func (m *QueryRewardsAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsAuctionsResponse.Merge(m, src)
}
func (m *QueryRewardsAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsAuctionsResponse proto.InternalMessageInfo

func (m *QueryRewardsAuctionsResponse) GetRewardAuctions() []RewardsAuction {
	if m != nil {
		return m.RewardAuctions
	}
	return nil
}

func (m *QueryRewardsAuctionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardsAuctionRequest is the request type for the Query/RewardsAuction RPC method.
type QueryRewardsAuctionRequest struct {
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryRewardsAuctionRequest) Reset()         { *m = QueryRewardsAuctionRequest{} }
func (m *QueryRewardsAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsAuctionRequest) ProtoMessage()    {}
func (*QueryRewardsAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{16}
}
func (m *QueryRewardsAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsAuctionRequest.Merge(m, src)
}
func (m *QueryRewardsAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsAuctionRequest proto.InternalMessageInfo

func (m *QueryRewardsAuctionRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

// QueryRewardsAuctionResponse is response type for the Query/RewardsAuction RPC method.
type QueryRewardsAuctionResponse struct {
	RewardAuction RewardsAuction `protobuf:"bytes,1,opt,name=reward_auction,json=rewardAuction,proto3" json:"reward_auction"`
}

func (m *QueryRewardsAuctionResponse) Reset()         { *m = QueryRewardsAuctionResponse{} }
func (m *QueryRewardsAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsAuctionResponse) ProtoMessage()    {}
func (*QueryRewardsAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{17}
}
func (m *QueryRewardsAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsAuctionResponse.Merge(m, src)
}
func (m *QueryRewardsAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsAuctionResponse proto.InternalMessageInfo

func (m *QueryRewardsAuctionResponse) GetRewardAuction() RewardsAuction {
	if m != nil {
		return m.RewardAuction
	}
	return RewardsAuction{}
}

// LiquidFarmResponse is response type for the Query/LiquidFarm RPC method.
type LiquidFarmResponse struct {
	PoolId                   uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LiquidFarmReserveAddress string                                 `protobuf:"bytes,2,opt,name=liquid_farm_reserve_address,json=liquidFarmReserveAddress,proto3" json:"liquid_farm_reserve_address,omitempty"`
	LFCoinDenom              string                                 `protobuf:"bytes,3,opt,name=LFCoinDenom,proto3" json:"LFCoinDenom,omitempty"`
	MinimumFarmAmount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=minimum_farm_amount,json=minimumFarmAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_farm_amount"`
	MinimumBidAmount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=minimum_bid_amount,json=minimumBidAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_bid_amount"`
	StakedCoin               types.Coin                             `protobuf:"bytes,6,opt,name=staked_coin,json=stakedCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"staked_coin"`
	QueuedCoin               types.Coin                             `protobuf:"bytes,7,opt,name=queued_coin,json=queuedCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"queued_coin"`
}

func (m *LiquidFarmResponse) Reset()         { *m = LiquidFarmResponse{} }
func (m *LiquidFarmResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidFarmResponse) ProtoMessage()    {}
func (*LiquidFarmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6573e06fd69a92, []int{18}
}
func (m *LiquidFarmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidFarmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidFarmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidFarmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidFarmResponse.Merge(m, src)
}
func (m *LiquidFarmResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidFarmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidFarmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidFarmResponse proto.InternalMessageInfo

func (m *LiquidFarmResponse) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LiquidFarmResponse) GetLiquidFarmReserveAddress() string {
	if m != nil {
		return m.LiquidFarmReserveAddress
	}
	return ""
}

func (m *LiquidFarmResponse) GetLFCoinDenom() string {
	if m != nil {
		return m.LFCoinDenom
	}
	return ""
}

func (m *LiquidFarmResponse) GetStakedCoin() types.Coin {
	if m != nil {
		return m.StakedCoin
	}
	return types.Coin{}
}

func (m *LiquidFarmResponse) GetQueuedCoin() types.Coin {
	if m != nil {
		return m.QueuedCoin
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryLiquidFarmsRequest)(nil), "squad.liquidfarming.v1beta1.QueryLiquidFarmsRequest")
	proto.RegisterType((*QueryLiquidFarmsResponse)(nil), "squad.liquidfarming.v1beta1.QueryLiquidFarmsResponse")
	proto.RegisterType((*QueryLiquidFarmRequest)(nil), "squad.liquidfarming.v1beta1.QueryLiquidFarmRequest")
	proto.RegisterType((*QueryLiquidFarmResponse)(nil), "squad.liquidfarming.v1beta1.QueryLiquidFarmResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "squad.liquidfarming.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "squad.liquidfarming.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryQueuedFarmingsRequest)(nil), "squad.liquidfarming.v1beta1.QueryQueuedFarmingsRequest")
	proto.RegisterType((*QueryQueuedFarmingsResponse)(nil), "squad.liquidfarming.v1beta1.QueryQueuedFarmingsResponse")
	proto.RegisterType((*QueryQueuedFarmingRequest)(nil), "squad.liquidfarming.v1beta1.QueryQueuedFarmingRequest")
	proto.RegisterType((*QueryQueuedFarmingResponse)(nil), "squad.liquidfarming.v1beta1.QueryQueuedFarmingResponse")
	proto.RegisterType((*QueryBidsRequest)(nil), "squad.liquidfarming.v1beta1.QueryBidsRequest")
	proto.RegisterType((*QueryBidsResponse)(nil), "squad.liquidfarming.v1beta1.QueryBidsResponse")
	proto.RegisterType((*QueryBidRequest)(nil), "squad.liquidfarming.v1beta1.QueryBidRequest")
	proto.RegisterType((*QueryBidResponse)(nil), "squad.liquidfarming.v1beta1.QueryBidResponse")
	proto.RegisterType((*QueryRewardsAuctionsRequest)(nil), "squad.liquidfarming.v1beta1.QueryRewardsAuctionsRequest")
	proto.RegisterType((*QueryRewardsAuctionsResponse)(nil), "squad.liquidfarming.v1beta1.QueryRewardsAuctionsResponse")
	proto.RegisterType((*QueryRewardsAuctionRequest)(nil), "squad.liquidfarming.v1beta1.QueryRewardsAuctionRequest")
	proto.RegisterType((*QueryRewardsAuctionResponse)(nil), "squad.liquidfarming.v1beta1.QueryRewardsAuctionResponse")
	proto.RegisterType((*LiquidFarmResponse)(nil), "squad.liquidfarming.v1beta1.LiquidFarmResponse")
}

func init() {
	proto.RegisterFile("squad/liquidfarming/v1beta1/query.proto", fileDescriptor_9d6573e06fd69a92)
}

var fileDescriptor_9d6573e06fd69a92 = []byte{
	// 1202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x26, 0x8e, 0xab, 0x3c, 0x37, 0x49, 0x3b, 0x2d, 0xad, 0xeb, 0xb4, 0x4e, 0xb4, 0x55,
	0x9b, 0x28, 0x25, 0xbb, 0xcd, 0x07, 0x6d, 0x1a, 0x0a, 0x22, 0xa6, 0x0a, 0x8a, 0xc8, 0x21, 0x31,
	0x12, 0x94, 0x0a, 0x61, 0xad, 0xb3, 0x8b, 0x19, 0xc5, 0xde, 0xb5, 0x77, 0x76, 0x5b, 0xaa, 0x28,
	0x17, 0xc4, 0x8d, 0x0b, 0x12, 0x97, 0x1e, 0x39, 0x71, 0x40, 0x5c, 0x11, 0xe2, 0x84, 0x10, 0x97,
	0x72, 0xab, 0xd4, 0x0b, 0xe2, 0x10, 0x50, 0xc2, 0xbf, 0xc0, 0x1d, 0xcd, 0xcc, 0xdb, 0x78, 0xd7,
	0x36, 0xde, 0x5d, 0x93, 0x53, 0xd6, 0x3b, 0xf3, 0x7e, 0x1f, 0xef, 0xbd, 0xd9, 0x79, 0x0a, 0xcc,
	0xb2, 0x96, 0x6f, 0x98, 0x7a, 0x9d, 0xb6, 0x7c, 0x6a, 0x7e, 0x62, 0xb8, 0x0d, 0x6a, 0xd7, 0xf4,
	0xc7, 0x8b, 0x55, 0xcb, 0x33, 0x16, 0xf5, 0x96, 0x6f, 0xb9, 0x4f, 0xb5, 0xa6, 0xeb, 0x78, 0x0e,
	0x99, 0x12, 0x1b, 0xb5, 0xc8, 0x46, 0x0d, 0x37, 0x16, 0xe6, 0x77, 0x1d, 0xd6, 0x70, 0x98, 0x5e,
	0x35, 0x98, 0x25, 0xa3, 0x4e, 0x30, 0x9a, 0x46, 0x8d, 0xda, 0x86, 0x47, 0x1d, 0x5b, 0x02, 0x15,
	0x8a, 0xe1, 0xbd, 0xc1, 0xae, 0x5d, 0x87, 0x06, 0xeb, 0x17, 0x6b, 0x4e, 0xcd, 0x11, 0x8f, 0x3a,
	0x7f, 0xc2, 0xb7, 0x57, 0x6b, 0x8e, 0x53, 0xab, 0x5b, 0xba, 0xd1, 0xa4, 0xba, 0x61, 0xdb, 0x8e,
	0x27, 0x20, 0x19, 0xae, 0xea, 0xfd, 0x5c, 0x44, 0x25, 0xcb, 0x80, 0xb9, 0x7e, 0x01, 0x4d, 0xc3,
	0x35, 0x1a, 0x08, 0xad, 0x1a, 0x70, 0x79, 0x87, 0x1b, 0xda, 0x12, 0x5b, 0x37, 0x0c, 0xb7, 0xc1,
	0xca, 0x56, 0xcb, 0xb7, 0x98, 0x47, 0x36, 0x00, 0xda, 0xee, 0xf2, 0xca, 0x8c, 0x32, 0x97, 0x5b,
	0xba, 0xa9, 0x49, 0x7b, 0x1a, 0xb7, 0xa7, 0xc9, 0x04, 0x22, 0xae, 0xb6, 0x6d, 0xd4, 0x2c, 0x8c,
	0x2d, 0x87, 0x22, 0x55, 0x0f, 0xf2, 0xdd, 0x14, 0xac, 0xe9, 0xd8, 0xcc, 0x22, 0x0f, 0xe1, 0xac,
	0x14, 0x59, 0xe1, 0x2a, 0x59, 0x5e, 0x99, 0x19, 0x99, 0xcb, 0x2d, 0xe9, 0x5a, 0x9f, 0x6a, 0x68,
	0x6d, 0x9c, 0x00, 0xa6, 0x94, 0x79, 0x7e, 0x38, 0x3d, 0x54, 0xce, 0xd5, 0xdb, 0x0c, 0xea, 0x22,
	0x5c, 0xea, 0x60, 0x0d, 0x7c, 0x5d, 0x86, 0x33, 0x4d, 0xc7, 0xa9, 0x57, 0xa8, 0x29, 0x4c, 0x65,
	0xca, 0x59, 0xfe, 0x73, 0xd3, 0x54, 0x5b, 0x5d, 0xb9, 0x38, 0xd1, 0xf9, 0x3e, 0xe4, 0x42, 0x3a,
	0x31, 0x19, 0x03, 0xca, 0x84, 0xb6, 0x4c, 0xf5, 0x22, 0x10, 0x41, 0xb9, 0x2d, 0x6a, 0x82, 0x0a,
	0xd5, 0x87, 0x70, 0x21, 0xf2, 0x16, 0x45, 0xac, 0x43, 0x56, 0xd6, 0x0e, 0xf9, 0xaf, 0xf7, 0xe5,
	0x97, 0xc1, 0xc8, 0x89, 0x81, 0xea, 0x01, 0x14, 0x04, 0xf2, 0x8e, 0x6f, 0xf9, 0x96, 0x90, 0x40,
	0xed, 0x1a, 0x8b, 0xcb, 0x4c, 0x47, 0x2b, 0x0c, 0x0f, 0xdc, 0x0a, 0xbf, 0x28, 0x30, 0xd5, 0x93,
	0x1f, 0x1d, 0x7e, 0x08, 0x93, 0x2d, 0xb1, 0x52, 0x41, 0x37, 0x41, 0x47, 0xcc, 0xf7, 0xb5, 0x1a,
	0x41, 0x43, 0xc7, 0x13, 0xad, 0x08, 0x05, 0x79, 0xa7, 0x87, 0x85, 0xd9, 0x58, 0x0b, 0x52, 0x57,
	0xc4, 0xc3, 0x7b, 0x70, 0xa5, 0xdb, 0x42, 0x6c, 0x06, 0xaf, 0x01, 0xb8, 0x72, 0x0f, 0x5f, 0x1b,
	0x16, 0x6b, 0x63, 0xf8, 0x66, 0xd3, 0x54, 0xfd, 0x5e, 0x75, 0x39, 0x49, 0xcb, 0x07, 0x30, 0x11,
	0x4d, 0x0b, 0x36, 0x40, 0xfa, 0xac, 0x8c, 0x47, 0xb2, 0xa2, 0x7e, 0xa9, 0xc0, 0x39, 0xc1, 0x5b,
	0xa2, 0x66, 0x7c, 0x17, 0x5c, 0x82, 0x6c, 0x95, 0x9a, 0xa6, 0xe5, 0x0a, 0xfd, 0x63, 0x65, 0xfc,
	0xd5, 0xd1, 0x1d, 0x23, 0x03, 0x77, 0xc7, 0x33, 0x05, 0xce, 0x87, 0xd4, 0xa0, 0xf9, 0x35, 0xc8,
	0x54, 0xa9, 0x19, 0x34, 0xc2, 0x4c, 0x5f, 0xcb, 0x25, 0x6a, 0xa2, 0x51, 0x11, 0x73, 0x7a, 0x45,
	0x5f, 0x87, 0xc9, 0x40, 0x59, 0x6c, 0x9a, 0x5e, 0x11, 0x69, 0x6a, 0x97, 0x79, 0xb4, 0x4a, 0xcd,
	0x4d, 0x53, 0xdd, 0x6a, 0xa7, 0xfa, 0xc4, 0xdb, 0x2a, 0x8c, 0x54, 0x31, 0x3e, 0xb9, 0x35, 0x1e,
	0xa2, 0x7e, 0x11, 0x9c, 0xa4, 0xb2, 0xf5, 0xc4, 0x70, 0x4d, 0xb6, 0xee, 0xef, 0x8a, 0x1b, 0x23,
	0x50, 0x77, 0x0d, 0xc0, 0x90, 0xaf, 0xda, 0x02, 0xc7, 0xf0, 0xcd, 0x29, 0x1e, 0xe8, 0x5f, 0x15,
	0xb8, 0xda, 0x5b, 0x06, 0x3a, 0x7c, 0x04, 0x93, 0xae, 0x58, 0xaa, 0x20, 0x79, 0x50, 0xc8, 0x5b,
	0x7d, 0xdd, 0x46, 0xe1, 0x82, 0x23, 0x2d, 0x91, 0x02, 0x8e, 0xd3, 0xab, 0xee, 0xeb, 0x78, 0xfa,
	0xa2, 0xac, 0xc9, 0x52, 0xa9, 0x3e, 0xe9, 0x59, 0x88, 0xd0, 0x0d, 0x37, 0x11, 0x4d, 0x00, 0x56,
	0x7b, 0x00, 0xff, 0xe3, 0x11, 0xff, 0xea, 0x8f, 0x19, 0x20, 0x3d, 0xae, 0xaa, 0xff, 0xec, 0xcb,
	0x37, 0x60, 0x2a, 0x74, 0x87, 0x55, 0x5c, 0x8b, 0x59, 0xee, 0x63, 0xab, 0x62, 0x98, 0xa6, 0x6b,
	0x31, 0x86, 0x67, 0x3a, 0x5f, 0x0f, 0x23, 0xf2, 0x0d, 0xeb, 0x72, 0x9d, 0x2c, 0x42, 0x6e, 0x6b,
	0xe3, 0x6d, 0x87, 0xda, 0x0f, 0x2c, 0xdb, 0x69, 0x88, 0x63, 0x3e, 0x56, 0x9a, 0x3c, 0x3a, 0x9c,
	0x0e, 0xbf, 0x2e, 0x87, 0x7f, 0x90, 0x8f, 0xe1, 0x42, 0x83, 0xda, 0xb4, 0xe1, 0x37, 0x24, 0xa5,
	0xd1, 0x70, 0x7c, 0xdb, 0xcb, 0x67, 0x44, 0xa8, 0xc6, 0x3d, 0xfd, 0x71, 0x38, 0x7d, 0xb3, 0x46,
	0xbd, 0x4f, 0xfd, 0xaa, 0xb6, 0xeb, 0x34, 0x74, 0x9c, 0x9d, 0xe4, 0x9f, 0x05, 0x66, 0xee, 0xe9,
	0xde, 0xd3, 0xa6, 0xc5, 0xb4, 0x4d, 0xdb, 0x2b, 0x9f, 0x47, 0x28, 0x2e, 0x6d, 0x5d, 0x00, 0x91,
	0x8f, 0x80, 0x04, 0xf8, 0xfc, 0xc4, 0x21, 0xfc, 0xe8, 0x40, 0xf0, 0xe7, 0x10, 0xa9, 0x44, 0x4d,
	0x44, 0xdf, 0x83, 0x1c, 0xf3, 0x8c, 0x3d, 0xcb, 0xac, 0xf0, 0xf1, 0x2d, 0x9f, 0x15, 0x65, 0xbb,
	0x12, 0xe9, 0xaf, 0xa0, 0x5c, 0xdc, 0x72, 0x49, 0xe7, 0x8c, 0xdf, 0xfd, 0x39, 0x3d, 0x9b, 0x80,
	0x91, 0x07, 0x94, 0x41, 0xc2, 0xf3, 0x67, 0x4e, 0x86, 0x9f, 0x78, 0x41, 0x76, 0xe6, 0xf4, 0xc9,
	0x24, 0x3c, 0x7f, 0x5e, 0xfa, 0xe7, 0x2c, 0x8c, 0x8a, 0x9e, 0x25, 0xcf, 0x14, 0xc8, 0xca, 0x41,
	0x81, 0xe8, 0x71, 0x97, 0x49, 0xc7, 0x94, 0x52, 0xb8, 0x9d, 0x3c, 0x40, 0xb6, 0xa6, 0x7a, 0xeb,
	0xf3, 0x97, 0x7f, 0x7f, 0x3d, 0x7c, 0x83, 0x5c, 0xd7, 0xe3, 0xe7, 0x53, 0xf2, 0xbd, 0x02, 0xb9,
	0xd0, 0xc8, 0x48, 0x56, 0xe2, 0xe9, 0xba, 0x87, 0xd8, 0xc2, 0x6b, 0x29, 0xa3, 0x50, 0xe9, 0x6d,
	0xa1, 0x74, 0x9e, 0xcc, 0xe9, 0xac, 0x65, 0xf8, 0xf1, 0xa3, 0x37, 0x23, 0x3f, 0x29, 0x00, 0x6d,
	0x24, 0xb2, 0x9c, 0x86, 0x37, 0x10, 0xbb, 0x92, 0x2e, 0x08, 0xb5, 0xbe, 0x25, 0xb4, 0xae, 0x91,
	0xd5, 0xbe, 0x5a, 0xf9, 0x47, 0x80, 0x85, 0x15, 0xeb, 0xfb, 0xf8, 0x99, 0x38, 0x20, 0xbf, 0x29,
	0x30, 0x11, 0x9d, 0xc8, 0xc8, 0xdd, 0x78, 0x29, 0x3d, 0x67, 0xc8, 0xc2, 0x6a, 0xfa, 0x40, 0xf4,
	0xf1, 0x40, 0xf8, 0x78, 0x93, 0xdc, 0x4f, 0xe0, 0xe3, 0x44, 0xbb, 0xde, 0x31, 0x2f, 0x92, 0x97,
	0x0a, 0x8c, 0x47, 0x08, 0xc8, 0x9d, 0x94, 0x8a, 0x02, 0x27, 0x77, 0x53, 0xc7, 0xa1, 0x91, 0x1d,
	0x61, 0xe4, 0x5d, 0xb2, 0xf9, 0x7f, 0x8c, 0xe8, 0xfb, 0xed, 0x79, 0xf1, 0x80, 0x7c, 0xa3, 0x40,
	0x86, 0x4f, 0x45, 0x64, 0x21, 0x5e, 0x54, 0x68, 0x96, 0x2b, 0x68, 0x49, 0xb7, 0xa3, 0xf4, 0x7b,
	0x42, 0xfa, 0x32, 0x59, 0x4c, 0x25, 0x5d, 0xcc, 0x5a, 0xdf, 0x2a, 0x30, 0x52, 0xa2, 0x26, 0x79,
	0x35, 0x11, 0x65, 0x20, 0x70, 0x21, 0xe1, 0x6e, 0xd4, 0x57, 0x12, 0xfa, 0xee, 0x93, 0xb5, 0xd4,
	0xfa, 0xf4, 0x7d, 0x39, 0x94, 0x1d, 0x90, 0x1f, 0x14, 0x98, 0xec, 0x18, 0x57, 0x48, 0x82, 0xae,
	0xed, 0x3d, 0x68, 0x15, 0xee, 0x0d, 0x10, 0x89, 0x66, 0x16, 0x84, 0x99, 0x59, 0x72, 0xa3, 0xaf,
	0x99, 0x60, 0x6e, 0x22, 0x3f, 0x2b, 0x30, 0x11, 0x85, 0x4a, 0x72, 0x4a, 0x7b, 0xce, 0x34, 0x85,
	0xd5, 0xf4, 0x81, 0x28, 0x7a, 0x4d, 0x88, 0x5e, 0x21, 0x4b, 0x89, 0x44, 0xeb, 0xfb, 0xed, 0xd1,
	0xe9, 0xa0, 0xb4, 0xfd, 0xfc, 0xa8, 0xa8, 0xbc, 0x38, 0x2a, 0x2a, 0x7f, 0x1d, 0x15, 0x95, 0xaf,
	0x8e, 0x8b, 0x43, 0x2f, 0x8e, 0x8b, 0x43, 0xbf, 0x1f, 0x17, 0x87, 0x1e, 0xdd, 0xe9, 0xba, 0xc6,
	0xb8, 0xbc, 0x85, 0xba, 0x51, 0x65, 0x78, 0x57, 0x7c, 0xd6, 0xc1, 0x24, 0xae, 0xb6, 0x6a, 0x56,
	0xfc, 0x17, 0x63, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0xda, 0x1c, 0x8b, 0xe8, 0x11,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	LiquidFarms(ctx context.Context, in *QueryLiquidFarmsRequest, opts ...grpc.CallOption) (*QueryLiquidFarmsResponse, error)
	LiquidFarm(ctx context.Context, in *QueryLiquidFarmRequest, opts ...grpc.CallOption) (*QueryLiquidFarmResponse, error)
	QueuedFarmings(ctx context.Context, in *QueryQueuedFarmingsRequest, opts ...grpc.CallOption) (*QueryQueuedFarmingsResponse, error)
	QueuedFarming(ctx context.Context, in *QueryQueuedFarmingRequest, opts ...grpc.CallOption) (*QueryQueuedFarmingResponse, error)
	Bids(ctx context.Context, in *QueryBidsRequest, opts ...grpc.CallOption) (*QueryBidsResponse, error)
	Bid(ctx context.Context, in *QueryBidRequest, opts ...grpc.CallOption) (*QueryBidResponse, error)
	RewardsAuctions(ctx context.Context, in *QueryRewardsAuctionsRequest, opts ...grpc.CallOption) (*QueryRewardsAuctionsResponse, error)
	RewardsAuction(ctx context.Context, in *QueryRewardsAuctionRequest, opts ...grpc.CallOption) (*QueryRewardsAuctionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidFarms(ctx context.Context, in *QueryLiquidFarmsRequest, opts ...grpc.CallOption) (*QueryLiquidFarmsResponse, error) {
	out := new(QueryLiquidFarmsResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/LiquidFarms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidFarm(ctx context.Context, in *QueryLiquidFarmRequest, opts ...grpc.CallOption) (*QueryLiquidFarmResponse, error) {
	out := new(QueryLiquidFarmResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/LiquidFarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueuedFarmings(ctx context.Context, in *QueryQueuedFarmingsRequest, opts ...grpc.CallOption) (*QueryQueuedFarmingsResponse, error) {
	out := new(QueryQueuedFarmingsResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/QueuedFarmings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueuedFarming(ctx context.Context, in *QueryQueuedFarmingRequest, opts ...grpc.CallOption) (*QueryQueuedFarmingResponse, error) {
	out := new(QueryQueuedFarmingResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/QueuedFarming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bids(ctx context.Context, in *QueryBidsRequest, opts ...grpc.CallOption) (*QueryBidsResponse, error) {
	out := new(QueryBidsResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/Bids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bid(ctx context.Context, in *QueryBidRequest, opts ...grpc.CallOption) (*QueryBidResponse, error) {
	out := new(QueryBidResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/Bid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsAuctions(ctx context.Context, in *QueryRewardsAuctionsRequest, opts ...grpc.CallOption) (*QueryRewardsAuctionsResponse, error) {
	out := new(QueryRewardsAuctionsResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/RewardsAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsAuction(ctx context.Context, in *QueryRewardsAuctionRequest, opts ...grpc.CallOption) (*QueryRewardsAuctionResponse, error) {
	out := new(QueryRewardsAuctionResponse)
	err := c.cc.Invoke(ctx, "/squad.liquidfarming.v1beta1.Query/RewardsAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	LiquidFarms(context.Context, *QueryLiquidFarmsRequest) (*QueryLiquidFarmsResponse, error)
	LiquidFarm(context.Context, *QueryLiquidFarmRequest) (*QueryLiquidFarmResponse, error)
	QueuedFarmings(context.Context, *QueryQueuedFarmingsRequest) (*QueryQueuedFarmingsResponse, error)
	QueuedFarming(context.Context, *QueryQueuedFarmingRequest) (*QueryQueuedFarmingResponse, error)
	Bids(context.Context, *QueryBidsRequest) (*QueryBidsResponse, error)
	Bid(context.Context, *QueryBidRequest) (*QueryBidResponse, error)
	RewardsAuctions(context.Context, *QueryRewardsAuctionsRequest) (*QueryRewardsAuctionsResponse, error)
	RewardsAuction(context.Context, *QueryRewardsAuctionRequest) (*QueryRewardsAuctionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LiquidFarms(ctx context.Context, req *QueryLiquidFarmsRequest) (*QueryLiquidFarmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidFarms not implemented")
}
func (*UnimplementedQueryServer) LiquidFarm(ctx context.Context, req *QueryLiquidFarmRequest) (*QueryLiquidFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidFarm not implemented")
}
func (*UnimplementedQueryServer) QueuedFarmings(ctx context.Context, req *QueryQueuedFarmingsRequest) (*QueryQueuedFarmingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuedFarmings not implemented")
}
func (*UnimplementedQueryServer) QueuedFarming(ctx context.Context, req *QueryQueuedFarmingRequest) (*QueryQueuedFarmingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuedFarming not implemented")
}
func (*UnimplementedQueryServer) Bids(ctx context.Context, req *QueryBidsRequest) (*QueryBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bids not implemented")
}
func (*UnimplementedQueryServer) Bid(ctx context.Context, req *QueryBidRequest) (*QueryBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (*UnimplementedQueryServer) RewardsAuctions(ctx context.Context, req *QueryRewardsAuctionsRequest) (*QueryRewardsAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsAuctions not implemented")
}
func (*UnimplementedQueryServer) RewardsAuction(ctx context.Context, req *QueryRewardsAuctionRequest) (*QueryRewardsAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsAuction not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidFarms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidFarmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidFarms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/LiquidFarms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidFarms(ctx, req.(*QueryLiquidFarmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/LiquidFarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidFarm(ctx, req.(*QueryLiquidFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueuedFarmings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueuedFarmingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueuedFarmings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/QueuedFarmings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueuedFarmings(ctx, req.(*QueryQueuedFarmingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueuedFarming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueuedFarmingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueuedFarming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/QueuedFarming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueuedFarming(ctx, req.(*QueryQueuedFarmingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/Bids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bids(ctx, req.(*QueryBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/Bid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bid(ctx, req.(*QueryBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/RewardsAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsAuctions(ctx, req.(*QueryRewardsAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squad.liquidfarming.v1beta1.Query/RewardsAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsAuction(ctx, req.(*QueryRewardsAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squad.liquidfarming.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LiquidFarms",
			Handler:    _Query_LiquidFarms_Handler,
		},
		{
			MethodName: "LiquidFarm",
			Handler:    _Query_LiquidFarm_Handler,
		},
		{
			MethodName: "QueuedFarmings",
			Handler:    _Query_QueuedFarmings_Handler,
		},
		{
			MethodName: "QueuedFarming",
			Handler:    _Query_QueuedFarming_Handler,
		},
		{
			MethodName: "Bids",
			Handler:    _Query_Bids_Handler,
		},
		{
			MethodName: "Bid",
			Handler:    _Query_Bid_Handler,
		},
		{
			MethodName: "RewardsAuctions",
			Handler:    _Query_RewardsAuctions_Handler,
		},
		{
			MethodName: "RewardsAuction",
			Handler:    _Query_RewardsAuction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "squad/liquidfarming/v1beta1/query.proto",
}

func (m *QueryLiquidFarmsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidFarmsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidFarmsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidFarmsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidFarmsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidFarmsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidFarms) > 0 {
		for iNdEx := len(m.LiquidFarms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidFarms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidFarmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidFarmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidFarmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidFarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidFarmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidFarmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidFarm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQueuedFarmingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueuedFarmingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueuedFarmingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueuedFarmingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueuedFarmingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueuedFarmingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueuedFarmings) > 0 {
		for iNdEx := len(m.QueuedFarmings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueuedFarmings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueuedFarmingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueuedFarmingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueuedFarmingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueuedFarmingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueuedFarmingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueuedFarmingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QueuedFarming.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardsAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardAuctions) > 0 {
		for iNdEx := len(m.RewardAuctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardAuctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardAuction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidFarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidFarmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidFarmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QueuedCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.StakedCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinimumBidAmount.Size()
		i -= size
		if _, err := m.MinimumBidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MinimumFarmAmount.Size()
		i -= size
		if _, err := m.MinimumFarmAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.LFCoinDenom) > 0 {
		i -= len(m.LFCoinDenom)
		copy(dAtA[i:], m.LFCoinDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LFCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LiquidFarmReserveAddress) > 0 {
		i -= len(m.LiquidFarmReserveAddress)
		copy(dAtA[i:], m.LiquidFarmReserveAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LiquidFarmReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLiquidFarmsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidFarmsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidFarms) > 0 {
		for _, e := range m.LiquidFarms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidFarmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryLiquidFarmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidFarm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryQueuedFarmingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueuedFarmingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueuedFarmings) > 0 {
		for _, e := range m.QueuedFarmings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueuedFarmingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryQueuedFarmingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.QueuedFarming.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.BidId != 0 {
		n += 1 + sovQuery(uint64(m.BidId))
	}
	return n
}

func (m *QueryBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bid.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardAuctions) > 0 {
		for _, e := range m.RewardAuctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	return n
}

func (m *QueryRewardsAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardAuction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *LiquidFarmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.LiquidFarmReserveAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LFCoinDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.MinimumFarmAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MinimumBidAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.StakedCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QueuedCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLiquidFarmsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidFarmsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidFarmsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidFarmsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidFarmsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidFarmsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidFarms = append(m.LiquidFarms, LiquidFarmResponse{})
			if err := m.LiquidFarms[len(m.LiquidFarms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidFarmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidFarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidFarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidFarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidFarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidFarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidFarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueuedFarmingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueuedFarmingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueuedFarmingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueuedFarmingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueuedFarmingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueuedFarmingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedFarmings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedFarmings = append(m.QueuedFarmings, QueuedFarming{})
			if err := m.QueuedFarmings[len(m.QueuedFarmings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueuedFarmingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueuedFarmingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueuedFarmingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueuedFarmingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueuedFarmingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueuedFarmingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedFarming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueuedFarming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAuctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAuctions = append(m.RewardAuctions, RewardsAuction{})
			if err := m.RewardAuctions[len(m.RewardAuctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidFarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidFarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidFarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidFarmReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LFCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LFCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumFarmAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumFarmAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueuedCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
