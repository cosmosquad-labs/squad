// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: squad/liquidfarming/v1beta1/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LiquidFarmProposal defines ...
type LiquidFarmProposal struct {
	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LiquidFarms []LiquidFarm `protobuf:"bytes,3,rep,name=liquidfarms,proto3" json:"liquidfarms"`
}

func (m *LiquidFarmProposal) Reset()      { *m = LiquidFarmProposal{} }
func (*LiquidFarmProposal) ProtoMessage() {}
func (*LiquidFarmProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2227273d83d96766, []int{0}
}
func (m *LiquidFarmProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidFarmProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidFarmProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidFarmProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidFarmProposal.Merge(m, src)
}
func (m *LiquidFarmProposal) XXX_Size() int {
	return m.Size()
}
func (m *LiquidFarmProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidFarmProposal.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidFarmProposal proto.InternalMessageInfo

// LiquidFarm defines ...
type LiquidFarm struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PoolId         uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolCoinDenom  string `protobuf:"bytes,3,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty"`
	LFCoinDenom    string `protobuf:"bytes,4,opt,name=lf_coin_denom,json=lfCoinDenom,proto3" json:"lf_coin_denom,omitempty"`
	ReserveAddress string `protobuf:"bytes,5,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
}

func (m *LiquidFarm) Reset()      { *m = LiquidFarm{} }
func (*LiquidFarm) ProtoMessage() {}
func (*LiquidFarm) Descriptor() ([]byte, []int) {
	return fileDescriptor_2227273d83d96766, []int{1}
}
func (m *LiquidFarm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidFarm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidFarm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidFarm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidFarm.Merge(m, src)
}
func (m *LiquidFarm) XXX_Size() int {
	return m.Size()
}
func (m *LiquidFarm) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidFarm.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidFarm proto.InternalMessageInfo

func (m *LiquidFarm) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LiquidFarm) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LiquidFarm) GetPoolCoinDenom() string {
	if m != nil {
		return m.PoolCoinDenom
	}
	return ""
}

func (m *LiquidFarm) GetLFCoinDenom() string {
	if m != nil {
		return m.LFCoinDenom
	}
	return ""
}

func (m *LiquidFarm) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*LiquidFarmProposal)(nil), "squad.liquidfarming.v1beta1.LiquidFarmProposal")
	proto.RegisterType((*LiquidFarm)(nil), "squad.liquidfarming.v1beta1.LiquidFarm")
}

func init() {
	proto.RegisterFile("squad/liquidfarming/v1beta1/proposal.proto", fileDescriptor_2227273d83d96766)
}

var fileDescriptor_2227273d83d96766 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xc7, 0x5b, 0x28, 0xbc, 0xf7, 0xb6, 0x01, 0x92, 0x7d, 0x24, 0x36, 0x9a, 0xb4, 0x84, 0x83,
	0x10, 0x13, 0xdb, 0x20, 0x89, 0x07, 0x6e, 0xa2, 0x21, 0x31, 0xf1, 0x40, 0x7a, 0xf4, 0x20, 0x69,
	0xbb, 0x4b, 0xdd, 0xa4, 0xed, 0x96, 0xdd, 0x42, 0xf4, 0x1b, 0x78, 0xf4, 0xe8, 0x91, 0x4f, 0xe1,
	0xdd, 0x1b, 0x47, 0x8e, 0x9e, 0x88, 0x29, 0x5f, 0xc4, 0x74, 0x4b, 0x2c, 0x7a, 0xf0, 0xd6, 0xf9,
	0xcf, 0x6f, 0x66, 0xfe, 0xd3, 0x1d, 0x70, 0xc2, 0x67, 0x73, 0x07, 0x59, 0x01, 0x99, 0xcd, 0x09,
	0x9a, 0x3a, 0x2c, 0x24, 0x91, 0x6f, 0x2d, 0x7a, 0x2e, 0x4e, 0x9c, 0x9e, 0x15, 0x33, 0x1a, 0x53,
	0xee, 0x04, 0x66, 0xcc, 0x68, 0x42, 0xe1, 0x91, 0x60, 0xcd, 0x6f, 0xac, 0xb9, 0x63, 0x0f, 0x9b,
	0x3e, 0xf5, 0xa9, 0xe0, 0xac, 0xec, 0x2b, 0x2f, 0x69, 0xbf, 0xca, 0x00, 0xde, 0x08, 0x7e, 0xe4,
	0xb0, 0x70, 0xbc, 0xeb, 0x07, 0x9b, 0xa0, 0x92, 0x90, 0x24, 0xc0, 0x9a, 0xdc, 0x92, 0xbb, 0xff,
	0xec, 0x3c, 0x80, 0x2d, 0xa0, 0x22, 0xcc, 0x3d, 0x46, 0xe2, 0x84, 0xd0, 0x48, 0x2b, 0x89, 0xdc,
	0xbe, 0x04, 0xef, 0x80, 0x5a, 0x4c, 0xe7, 0x5a, 0xb9, 0x55, 0xee, 0xaa, 0x67, 0x1d, 0xf3, 0x17,
	0x5f, 0x66, 0x31, 0x7d, 0xf8, 0x7f, 0xb5, 0x31, 0xa4, 0x74, 0x63, 0xa8, 0x85, 0xc6, 0xed, 0xfd,
	0x86, 0x83, 0xbf, 0x4f, 0x4b, 0x43, 0x7a, 0x59, 0x1a, 0x52, 0xfb, 0x4d, 0x06, 0xa0, 0xc0, 0x60,
	0x1d, 0x94, 0x08, 0x12, 0x6e, 0x15, 0xbb, 0x44, 0x10, 0x3c, 0x00, 0x7f, 0x62, 0x4a, 0x83, 0x09,
	0x41, 0xc2, 0xa6, 0x62, 0x57, 0xb3, 0xf0, 0x1a, 0xc1, 0x63, 0xd0, 0x10, 0x09, 0x8f, 0x92, 0x68,
	0x82, 0x70, 0x44, 0x43, 0xad, 0x2c, 0xf6, 0xa8, 0x65, 0xf2, 0x25, 0x25, 0xd1, 0x55, 0x26, 0xc2,
	0x3e, 0xa8, 0x05, 0xd3, 0x7d, 0x4a, 0xc9, 0xa8, 0x61, 0x43, 0xd8, 0x1b, 0x7d, 0x71, 0xb6, 0x1a,
	0x4c, 0x8b, 0xa2, 0x0e, 0x68, 0x30, 0xcc, 0x31, 0x5b, 0xe0, 0x89, 0x83, 0x10, 0xc3, 0x9c, 0x6b,
	0x15, 0xd1, 0xbc, 0xbe, 0x93, 0x2f, 0x72, 0x75, 0xa0, 0x64, 0x3b, 0x0c, 0xc7, 0xab, 0x54, 0x97,
	0xd7, 0xa9, 0x2e, 0x7f, 0xa4, 0xba, 0xfc, 0xbc, 0xd5, 0xa5, 0xf5, 0x56, 0x97, 0xde, 0xb7, 0xba,
	0x74, 0x7b, 0xee, 0x93, 0xe4, 0x7e, 0xee, 0x9a, 0x1e, 0x0d, 0x2d, 0x8f, 0xf2, 0x90, 0x8a, 0x3f,
	0x78, 0x1a, 0x38, 0x2e, 0xb7, 0xf2, 0x83, 0x78, 0xf8, 0x71, 0x12, 0xc9, 0x63, 0x8c, 0xb9, 0x5b,
	0x15, 0xaf, 0xda, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x15, 0x71, 0x2f, 0x36, 0x02, 0x00,
	0x00,
}

func (m *LiquidFarmProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidFarmProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidFarmProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidFarms) > 0 {
		for iNdEx := len(m.LiquidFarms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidFarms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidFarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidFarm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidFarm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LFCoinDenom) > 0 {
		i -= len(m.LFCoinDenom)
		copy(dAtA[i:], m.LFCoinDenom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LFCoinDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidFarmProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.LiquidFarms) > 0 {
		for _, e := range m.LiquidFarms {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *LiquidFarm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProposal(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovProposal(uint64(m.PoolId))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LFCoinDenom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidFarmProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidFarmProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidFarmProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidFarms = append(m.LiquidFarms, LiquidFarm{})
			if err := m.LiquidFarms[len(m.LiquidFarms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidFarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidFarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidFarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LFCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LFCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
