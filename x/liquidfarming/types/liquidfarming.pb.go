// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: squad/liquidfarming/v1beta1/liquidfarming.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatusNil AuctionStatus = 0
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatusStarted AuctionStatus = 1
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatusFinished AuctionStatus = 2
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_STARTED",
	2: "AUCTION_STATUS_FINISHED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_STARTED":     1,
	"AUCTION_STATUS_FINISHED":    2,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3445e3599d3c045, []int{0}
}

// QueuedFarming defines queued farming that is waiting in a queue
// to be excuted at every epoch to mint LFCoin.
type QueuedFarming struct {
	PoolId uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueuedFarming) Reset()         { *m = QueuedFarming{} }
func (m *QueuedFarming) String() string { return proto.CompactTextString(m) }
func (*QueuedFarming) ProtoMessage()    {}
func (*QueuedFarming) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3445e3599d3c045, []int{0}
}
func (m *QueuedFarming) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedFarming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedFarming.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedFarming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedFarming.Merge(m, src)
}
func (m *QueuedFarming) XXX_Size() int {
	return m.Size()
}
func (m *QueuedFarming) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedFarming.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedFarming proto.InternalMessageInfo

// RewardsAuction defines rewards auction that is created by the module account
// at an end block for every epoch.
type RewardsAuction struct {
	// id specifies the id for the auction
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId               uint64                                   `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BiddingCoinDenom     string                                   `protobuf:"bytes,3,opt,name=bidding_coin_denom,json=biddingCoinDenom,proto3" json:"bidding_coin_denom,omitempty"`
	PayingReserveAddress string                                   `protobuf:"bytes,4,opt,name=paying_reserve_address,json=payingReserveAddress,proto3" json:"paying_reserve_address,omitempty"`
	StartTime            time.Time                                `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime              time.Time                                `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	Status               AuctionStatus                            `protobuf:"varint,7,opt,name=status,proto3,enum=squad.liquidfarming.v1beta1.AuctionStatus" json:"status,omitempty"`
	Winner               string                                   `protobuf:"bytes,8,opt,name=winner,proto3" json:"winner,omitempty"`
	Rewards              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *RewardsAuction) Reset()         { *m = RewardsAuction{} }
func (m *RewardsAuction) String() string { return proto.CompactTextString(m) }
func (*RewardsAuction) ProtoMessage()    {}
func (*RewardsAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3445e3599d3c045, []int{1}
}
func (m *RewardsAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsAuction.Merge(m, src)
}
func (m *RewardsAuction) XXX_Size() int {
	return m.Size()
}
func (m *RewardsAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsAuction.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsAuction proto.InternalMessageInfo

// Bid defines ...
type Bid struct {
	PoolId uint64     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Bidder string     `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3445e3599d3c045, []int{2}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("squad.liquidfarming.v1beta1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*QueuedFarming)(nil), "squad.liquidfarming.v1beta1.QueuedFarming")
	proto.RegisterType((*RewardsAuction)(nil), "squad.liquidfarming.v1beta1.RewardsAuction")
	proto.RegisterType((*Bid)(nil), "squad.liquidfarming.v1beta1.Bid")
}

func init() {
	proto.RegisterFile("squad/liquidfarming/v1beta1/liquidfarming.proto", fileDescriptor_b3445e3599d3c045)
}

var fileDescriptor_b3445e3599d3c045 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x18, 0xb5, 0x93, 0x5c, 0x07, 0x06, 0x81, 0x22, 0x2b, 0x17, 0x8c, 0xaf, 0xe4, 0x58, 0x2c, 0xee,
	0x8d, 0xd0, 0xc5, 0x2e, 0x14, 0xb1, 0xe8, 0xa6, 0xca, 0xaf, 0xea, 0x4d, 0xda, 0xda, 0x66, 0xd3,
	0x8d, 0x65, 0x67, 0x06, 0x33, 0x6a, 0xec, 0x09, 0x1e, 0x1b, 0xca, 0x1b, 0x20, 0x56, 0xbc, 0x00,
	0x12, 0x52, 0x77, 0x7d, 0x83, 0xbe, 0x01, 0x4b, 0x96, 0x55, 0x17, 0xd0, 0x82, 0xd4, 0xe7, 0xa8,
	0xc6, 0x1e, 0xa2, 0x9a, 0x4a, 0x88, 0xae, 0xec, 0x6f, 0xce, 0x9c, 0x6f, 0xce, 0x9c, 0xef, 0x68,
	0x80, 0x49, 0x0f, 0x32, 0x1f, 0x9a, 0x13, 0x7c, 0x90, 0x61, 0xb8, 0xe7, 0x27, 0x11, 0x8e, 0x43,
	0xf3, 0x70, 0x33, 0x40, 0xa9, 0xbf, 0x59, 0x5e, 0x35, 0xa6, 0x09, 0x49, 0x89, 0xfc, 0x4f, 0x4e,
	0x30, 0xca, 0x10, 0x27, 0xa8, 0xcd, 0x90, 0x84, 0x24, 0xdf, 0x67, 0xb2, 0xbf, 0x82, 0xa2, 0xae,
	0x8e, 0x09, 0x8d, 0x08, 0xf5, 0x0a, 0xa0, 0x28, 0x38, 0xa4, 0x15, 0x95, 0x19, 0xf8, 0x14, 0xcd,
	0x8e, 0x1d, 0x13, 0x1c, 0x73, 0xbc, 0x15, 0x12, 0x12, 0x4e, 0x90, 0x99, 0x57, 0x41, 0xb6, 0x67,
	0xa6, 0x38, 0x42, 0x34, 0xf5, 0xa3, 0x69, 0xb1, 0x61, 0xed, 0x10, 0x2c, 0xbe, 0xcd, 0x50, 0x86,
	0xe0, 0xb0, 0x90, 0x22, 0xaf, 0x80, 0xfa, 0x94, 0x90, 0x89, 0x87, 0xa1, 0x22, 0xea, 0x62, 0xbb,
	0x66, 0x4b, 0xac, 0xb4, 0xa0, 0x3c, 0x04, 0x92, 0x1f, 0x91, 0x2c, 0x4e, 0x95, 0x8a, 0x2e, 0xb6,
	0xe7, 0xbb, 0xc6, 0xe5, 0x75, 0x4b, 0xf8, 0x7a, 0xdd, 0xfa, 0x37, 0xc4, 0xe9, 0x7e, 0x16, 0x18,
	0x63, 0x12, 0x71, 0x6d, 0xfc, 0xb3, 0x41, 0xe1, 0x7b, 0x33, 0x3d, 0x9e, 0x22, 0x6a, 0x58, 0x71,
	0x6a, 0x73, 0xf6, 0x8b, 0xda, 0xc9, 0x45, 0x4b, 0x58, 0xfb, 0x51, 0x05, 0x4b, 0x36, 0x3a, 0xf2,
	0x13, 0x48, 0x3b, 0xd9, 0x38, 0xc5, 0x24, 0x96, 0x97, 0x40, 0x65, 0x76, 0x68, 0x05, 0xc3, 0x5f,
	0x95, 0x54, 0x4a, 0x4a, 0xfe, 0x07, 0x72, 0x80, 0x21, 0xc4, 0x71, 0xe8, 0xb1, 0xab, 0x7a, 0x10,
	0xc5, 0x24, 0x52, 0xaa, 0x4c, 0x95, 0xdd, 0xe0, 0x48, 0x8f, 0xe0, 0xb8, 0xcf, 0xd6, 0xe5, 0x6d,
	0xb0, 0x3c, 0xf5, 0x8f, 0xd9, 0xe6, 0x04, 0x51, 0x94, 0x1c, 0x22, 0xcf, 0x87, 0x30, 0x41, 0x94,
	0x2a, 0xb5, 0x9c, 0xd1, 0x2c, 0x50, 0xbb, 0x00, 0x3b, 0x05, 0x26, 0xf7, 0x00, 0xa0, 0xa9, 0x9f,
	0xa4, 0x1e, 0x33, 0x4c, 0xf9, 0x4b, 0x17, 0xdb, 0x0b, 0x5b, 0xaa, 0x51, 0xb8, 0x69, 0xdc, 0xbb,
	0x69, 0xb8, 0xf7, 0x6e, 0x76, 0xe7, 0x98, 0x1b, 0x67, 0x37, 0x2d, 0xd1, 0x9e, 0xcf, 0x79, 0x0c,
	0x91, 0x5f, 0x82, 0x39, 0x14, 0xc3, 0xa2, 0x85, 0xf4, 0x07, 0x2d, 0xea, 0x28, 0x86, 0x79, 0x83,
	0x2e, 0x90, 0x68, 0xea, 0xa7, 0x19, 0x55, 0xea, 0xba, 0xd8, 0x5e, 0xda, 0x5a, 0x37, 0x1e, 0x49,
	0x8f, 0xc1, 0x8d, 0x74, 0x72, 0x86, 0xcd, 0x99, 0xf2, 0x32, 0x90, 0x8e, 0x70, 0x1c, 0xa3, 0x44,
	0x99, 0xcb, 0xef, 0xcb, 0x2b, 0x19, 0x81, 0x7a, 0x52, 0x0c, 0x40, 0x99, 0xd7, 0xab, 0xed, 0x85,
	0xad, 0x55, 0x83, 0x47, 0x8b, 0x85, 0x69, 0xd6, 0x94, 0x19, 0xd9, 0x7d, 0xc6, 0xa4, 0x7d, 0xba,
	0x69, 0xb5, 0x9f, 0x30, 0x6b, 0x46, 0xa0, 0xf6, 0x7d, 0xef, 0xb5, 0x0b, 0x11, 0x54, 0xbb, 0xe5,
	0x69, 0x96, 0x73, 0xb5, 0x0c, 0x24, 0x36, 0x33, 0x94, 0x14, 0xb9, 0xb2, 0x79, 0x25, 0x07, 0xb3,
	0xbc, 0x55, 0x73, 0xeb, 0x1e, 0x91, 0x67, 0x72, 0x79, 0xff, 0x3d, 0x51, 0x5e, 0x39, 0x8b, 0xeb,
	0x9f, 0x45, 0xb0, 0x58, 0xf2, 0x4e, 0xde, 0x06, 0x6a, 0x67, 0xb7, 0xe7, 0x5a, 0xaf, 0x47, 0x9e,
	0xe3, 0x76, 0xdc, 0x5d, 0xc7, 0xdb, 0x1d, 0x39, 0x6f, 0x06, 0x3d, 0x6b, 0x68, 0x0d, 0xfa, 0x0d,
	0x41, 0x6d, 0x9e, 0x9e, 0xeb, 0x8d, 0x12, 0x65, 0x84, 0x27, 0x2c, 0x69, 0x0f, 0x58, 0x8e, 0xdb,
	0xb1, 0xdd, 0x41, 0xbf, 0x21, 0xaa, 0xca, 0xe9, 0xb9, 0xde, 0x2c, 0x31, 0x1c, 0x16, 0x13, 0x04,
	0xe5, 0x1d, 0xb0, 0xf2, 0x80, 0x35, 0xb4, 0x46, 0x96, 0xf3, 0x6a, 0xd0, 0x6f, 0x54, 0xd4, 0xd5,
	0xd3, 0x73, 0xfd, 0xef, 0x12, 0x6d, 0x88, 0x63, 0x4c, 0xf7, 0x11, 0x54, 0x6b, 0x27, 0x1f, 0x35,
	0xa1, 0xeb, 0x5e, 0x7e, 0xd7, 0x84, 0xcb, 0x5b, 0x4d, 0xbc, 0xba, 0xd5, 0xc4, 0x6f, 0xb7, 0x9a,
	0x78, 0x76, 0xa7, 0x09, 0x57, 0x77, 0x9a, 0xf0, 0xe5, 0x4e, 0x13, 0xde, 0xed, 0xfc, 0x66, 0x08,
	0x8b, 0xcf, 0xc6, 0xc4, 0x0f, 0x28, 0x7f, 0xb8, 0x3e, 0x3c, 0x78, 0xba, 0x72, 0x93, 0x02, 0x29,
	0x8f, 0xe7, 0xf3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x8e, 0xd4, 0x2b, 0xde, 0x04, 0x00,
	0x00,
}

func (m *QueuedFarming) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedFarming) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedFarming) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidfarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintLiquidfarming(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidfarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintLiquidfarming(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintLiquidfarming(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLiquidfarming(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidfarming(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.PayingReserveAddress) > 0 {
		i -= len(m.PayingReserveAddress)
		copy(dAtA[i:], m.PayingReserveAddress)
		i = encodeVarintLiquidfarming(dAtA, i, uint64(len(m.PayingReserveAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BiddingCoinDenom) > 0 {
		i -= len(m.BiddingCoinDenom)
		copy(dAtA[i:], m.BiddingCoinDenom)
		i = encodeVarintLiquidfarming(dAtA, i, uint64(len(m.BiddingCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidfarming(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidfarming(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidfarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintLiquidfarming(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidfarming(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidfarming(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidfarming(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueuedFarming) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovLiquidfarming(uint64(m.PoolId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLiquidfarming(uint64(l))
	return n
}

func (m *RewardsAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidfarming(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidfarming(uint64(m.PoolId))
	}
	l = len(m.BiddingCoinDenom)
	if l > 0 {
		n += 1 + l + sovLiquidfarming(uint64(l))
	}
	l = len(m.PayingReserveAddress)
	if l > 0 {
		n += 1 + l + sovLiquidfarming(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLiquidfarming(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovLiquidfarming(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidfarming(uint64(m.Status))
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovLiquidfarming(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiquidfarming(uint64(l))
		}
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovLiquidfarming(uint64(m.PoolId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovLiquidfarming(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLiquidfarming(uint64(l))
	return n
}

func sovLiquidfarming(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidfarming(x uint64) (n int) {
	return sovLiquidfarming(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueuedFarming) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidfarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedFarming: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedFarming: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidfarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidfarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidfarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidfarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidfarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidfarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidfarming(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidfarming
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidfarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidfarming
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidfarming
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidfarming
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidfarming        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidfarming          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidfarming = fmt.Errorf("proto: unexpected end of group")
)
