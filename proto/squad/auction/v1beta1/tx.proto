syntax = "proto3";

package squad.auction.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "squad/auction/v1beta1/auction.proto";

option go_package = "github.com/cosmosquad-labs/squad/x/auction/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateAuction(MsgCreateAuction)
      returns (MsgCreateAuctionResponse);
}

message MsgCreateAuction {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  google.protobuf.Any custom            = 1 [(cosmos_proto.accepts_interface) = "Custom"];

  string auctioneer = 2;

  string start_price = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  cosmos.base.v1beta1.Coin selling_coin = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  string paying_coin_denom = 5;

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 7
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

message MsgCreateAuctionResponse {}
