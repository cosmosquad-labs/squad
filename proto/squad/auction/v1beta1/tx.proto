syntax = "proto3";

package squad.auction.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "squad/auction/v1beta1/auction.proto";

option go_package = "github.com/cosmosquad-labs/squad/x/auction/types";

// Msg defines the Msg service.
service Msg {
  // Submit a create fixed price auction message.
  rpc CreateFixedPriceAuction(MsgCreateFixedPriceAuction)
      returns (MsgCreateFixedPriceAuctionResponse);

  // CancelAuction defines a method to cancel the auction message.
  rpc CancelAuction(MsgCancelAuction) returns (MsgCancelAuctionResponse);

  // PlaceBid defines a method to place a bid message.
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);
}

// MsgCreateFixedPriceAuction defines a SDK message for creating a fixed price
// auction.
message MsgCreateFixedPriceAuction {
  option (gogoproto.goproto_getters) = false;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 1;

  // start_price specifies the starting price of the auction
  string start_price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // selling_coins specifies the selling coins for the auction
  repeated cosmos.base.v1beta1.Coin selling_coins = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid
  // for
  string paying_coin_denom = 4;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 5
      [ (gogoproto.nullable) = false ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 7
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

// MsgCreateFixedPriceAuctionResponse defines the
// Msg/MsgCreateFixedPriceAuctionResponse response type.
message MsgCreateFixedPriceAuctionResponse {}

// MsgCancelAuction defines a SDK message for cancelling the auction.
// Cancelling is only allowed when the auction hasn't started yet.
message MsgCancelAuction {
  option (gogoproto.goproto_getters) = false;

  // auctioneer specifies the bech32-encoded address that is in charge of the
  // auction
  string auctioneer = 1;

  // auction_id specifies the auction id
  uint64 auction_id = 2;
}

// MsgCancelAuctionResponse defines the Msg/MsgCancelAuctionResponse
// response type.
message MsgCancelAuctionResponse {}

// MsgPlaceBid defines a SDK message for placing a bid for the auction.
message MsgPlaceBid { // id specifies index of the auction
  option (gogoproto.goproto_getters) = false;

  // auction_id specifies the auction id
  uint64 auction_id = 1;

  // bidder specifies the bech32-encoded address that bids for the auction
  string bidder = 2;

  // type specifies the bid type; type 1 is fixed price, 2 is how-much-worth, 3
  // is how-many-coins
  BidType bid_type = 3;

  // price specifies the bid price.
  // The bid price must be the start price for fixed price auction whereas
  // the bide price can be any value that the bidder places.
  string price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // coin specifies the paying amount of coin or the selling amount that the
  // bidder bids
  cosmos.base.v1beta1.Coin coin = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

// MsgPlaceBidResponse defines the Msg/MsgPlaceBidResponse response type.
message MsgPlaceBidResponse {}
