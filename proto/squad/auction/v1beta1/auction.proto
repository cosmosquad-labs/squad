syntax = "proto3";

package squad.auction.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cosmosquad-labs/squad/x/auction/types";
option (gogoproto.goproto_getters_all) = false;

// BaseAuction defines a base auction type. It contains all the necessary fields
// for basic auction functionality. Any custom auction type should extend this
// type for additional functionality (e.g. batch auction, fixed price
// auction).
message BaseAuction {
  option (cosmos_proto.implements_interface) = "AuctionI";

  // id specifies index of the auction
  uint64 id = 1;

  // type specifies the auction type
  // type 1 is fixed price and 2 is batch auction
  AuctionType type = 2;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 3;

  // start_price specifies the starting price of the auction
  // it is determined by the proportion of the price of paying coin denom
  string start_price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // selling_coins specifies the selling coins for the auction
  repeated cosmos.base.v1beta1.Coin selling_coins = 5
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid
  // for
  string paying_coin_denom = 6;

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 7
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 8
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // selling_reserve_address specifies the bech32-encoded address that has all
  // the selling coin
  string selling_reserve_address = 9;

  // paying_reserve_address specifies the bech32-encoded address that has all
  // the paying coin
  string paying_reserve_address = 10;

  // vesting_reserve_address specifies the bech32-encoded vesting address that
  // holds vesting amounts of coin
  string vesting_reserve_address = 11;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 12
      [ (gogoproto.nullable) = false ];

  // status specifies the auction status
  AuctionStatus status = 13;
}

// FixedPriceAuction defines the fixed price auction type. It is the most
// simpliest way to raise funds. An auctioneer sets the starting price for each
// selling amounts of coin and bidders bid to purchase based on the fixed price.
message FixedPriceAuction {
  BaseAuction base_auction = 1 [ (gogoproto.embed) = true ];

  // remaining_coins specifies the remaining amount of selling coins to sell
  repeated cosmos.base.v1beta1.Coin remaining_coins = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// VestingSchedule defines the vesting schedule for the owner of an auction.
message VestingSchedule {
  // release_time specifies the time for distribution of the vesting coin
  google.protobuf.Timestamp release_time = 1
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // weight specifies the vesting weight for the schedule
  string weight = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// VestingQueue defines the vesting queue.
message VestingQueue {
  // auction_id specifies the id of the auction
  uint64 auction_id = 1;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 2;

  // paying_coin specifies the paying amount of coin
  cosmos.base.v1beta1.Coin paying_coin = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // release_time specifies the timestamp of the vesting schedule
  google.protobuf.Timestamp release_time = 4
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // released specifies the status of distribution
  bool released = 5;
}

// Bid defines a standard bid for an auction.
message Bid {
  // auction_id specifies the id of the auction
  uint64 auction_id = 1;

  // bidder specifies the bech32-encoded address that bids for the auction
  string bidder = 2;

  // id specifies an index of a bid for the bidder
  uint64 id = 3;

  // type specifies the bid type; type 1 is fixed price, 2 is how-much-worth, 3
  // is how-many-coins
  BidType type = 4;

  // price specifies the bid price in which price the bidder places the bid
  string price = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // coin specifies the amount of coin that the bidder bids
  // for a fixed price auction, the denom is of the paying coin.
  // for a batch auction of how-much-worth, the denom is of the paying coin.
  // for a batch auction of how-many-coins, the denom is of the selling coin.
  cosmos.base.v1beta1.Coin coin = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // is_matched specifies the bid that is a winning bid and enables the bidder
  // to purchase the selling coin
  bool is_matched = 7;
}

// AuctionType enumerates the valid types of an auction.
enum AuctionType {
  option (gogoproto.goproto_enum_prefix) = false;

  // AUCTION_TYPE_UNSPECIFIED defines the default auction type
  AUCTION_TYPE_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "AuctionTypeNil" ];
  // AUCTION_TYPE_FIXED_PRICE defines the fixed price auction type
  AUCTION_TYPE_FIXED_PRICE = 1
      [ (gogoproto.enumvalue_customname) = "AuctionTypeFixedPrice" ];
}

// AuctionStatus enumerates the valid status of an auction.
enum AuctionStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // AUCTION_STATUS_UNSPECIFIED defines the default auction status
  AUCTION_STATUS_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "AuctionStatusNil" ];
  // AUCTION_STATUS_STANDBY defines the standby auction status
  AUCTION_STATUS_STANDBY = 1
      [ (gogoproto.enumvalue_customname) = "AuctionStatusStandBy" ];
  // AUCTION_STATUS_STARTED defines the started auction status
  AUCTION_STATUS_STARTED = 2
      [ (gogoproto.enumvalue_customname) = "AuctionStatusStarted" ];
  // AUCTION_STATUS_VESTING defines the vesting auction status
  AUCTION_STATUS_VESTING = 3
      [ (gogoproto.enumvalue_customname) = "AuctionStatusVesting" ];
  // AUCTION_STATUS_FINISHED defines the finished auction status
  AUCTION_STATUS_FINISHED = 4
      [ (gogoproto.enumvalue_customname) = "AuctionStatusFinished" ];
  // AUCTION_STATUS_CANCELLED defines the cancelled auction status
  AUCTION_STATUS_CANCELLED = 5
      [ (gogoproto.enumvalue_customname) = "AuctionStatusCancelled" ];
}


// BidType enumerates the valid types of a bid.
enum BidType {
  option (gogoproto.goproto_enum_prefix) = false;

  // BID_TYPE_UNSPECIFIED defines the default bid type
  BID_TYPE_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "BidTypeNil" ];

  // BID_TYPE_FIXED_PRICE defines a bid type for a fixed price auction type
  BID_TYPE_FIXED_PRICE = 1
      [ (gogoproto.enumvalue_customname) = "BidTypeFixedPrice" ];

  // BID_TYPE_BATCH_WORTH defines a bid type for How-Much-Worth-to-Buy of a
  // batch auction
  BID_TYPE_BATCH_WORTH = 2
      [ (gogoproto.enumvalue_customname) = "BidTypeBatchWorth" ];

  // BID_TYPE_BATCH_MANY defines a bid type for How-Many-Coins-to-Buy of a batch
  // auction
  BID_TYPE_BATCH_MANY = 3
      [ (gogoproto.enumvalue_customname) = "BidTypeBatchMany" ];
}
